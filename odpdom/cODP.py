# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cODP', [dirname(__file__)])
        except ImportError:
            import _cODP
            return _cODP
        if fp is not None:
            try:
                _mod = imp.load_module('_cODP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cODP = swig_import_helper()
    del swig_import_helper
else:
    import _cODP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def ODP_parseString(*args):
  return _cODP.ODP_parseString(*args)
ODP_parseString = _cODP.ODP_parseString

def ODP_parseFile(*args):
  return _cODP.ODP_parseFile(*args)
ODP_parseFile = _cODP.ODP_parseFile
class ODPNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doc"] = _cODP.ODPNode_doc_set
    __swig_getmethods__["doc"] = _cODP.ODPNode_doc_get
    if _newclass:doc = _swig_property(_cODP.ODPNode_doc_get, _cODP.ODPNode_doc_set)
    __swig_setmethods__["pos"] = _cODP.ODPNode_pos_set
    __swig_getmethods__["pos"] = _cODP.ODPNode_pos_get
    if _newclass:pos = _swig_property(_cODP.ODPNode_pos_get, _cODP.ODPNode_pos_set)
    def __init__(self, *args): 
        this = _cODP.new_ODPNode(*args)
        try: self.this.append(this)
        except: self.this = this
    ELEMENT_NODE = _cODP.ODPNode_ELEMENT_NODE
    ATTRIBUTE_NODE = _cODP.ODPNode_ATTRIBUTE_NODE
    TEXT_NODE = _cODP.ODPNode_TEXT_NODE
    CDATA_SECTION_NODE = _cODP.ODPNode_CDATA_SECTION_NODE
    ENTITY_REFERENCE_NODE = _cODP.ODPNode_ENTITY_REFERENCE_NODE
    ENTITY_NODE = _cODP.ODPNode_ENTITY_NODE
    PROCESSING_INSTRUCTION_NODE = _cODP.ODPNode_PROCESSING_INSTRUCTION_NODE
    COMMENT_NODE = _cODP.ODPNode_COMMENT_NODE
    DOCUMENT_NODE = _cODP.ODPNode_DOCUMENT_NODE
    DOCUMENT_TYPE_NODE = _cODP.ODPNode_DOCUMENT_TYPE_NODE
    DOCUMENT_FRAGMENT_NODE = _cODP.ODPNode_DOCUMENT_FRAGMENT_NODE
    NOTATION_NODE = _cODP.ODPNode_NOTATION_NODE
    def getNodeName(self): return _cODP.ODPNode_getNodeName(self)
    def getNodeValue(self): return _cODP.ODPNode_getNodeValue(self)
    def setNodeValue(self, *args): return _cODP.ODPNode_setNodeValue(self, *args)
    def getNodeType(self): return _cODP.ODPNode_getNodeType(self)
    def getParentNode(self): return _cODP.ODPNode_getParentNode(self)
    def getChildNodes(self): return _cODP.ODPNode_getChildNodes(self)
    def getFirstChild(self): return _cODP.ODPNode_getFirstChild(self)
    def getLastChild(self): return _cODP.ODPNode_getLastChild(self)
    def getPreviousSibling(self): return _cODP.ODPNode_getPreviousSibling(self)
    def getNextSibling(self): return _cODP.ODPNode_getNextSibling(self)
    def getAttributes(self): return _cODP.ODPNode_getAttributes(self)
    def getOwnerDocument(self): return _cODP.ODPNode_getOwnerDocument(self)
    def hasChildNodes(self): return _cODP.ODPNode_hasChildNodes(self)
    def up(self): return _cODP.ODPNode_up(self)
    def down(self): return _cODP.ODPNode_down(self)
    def next(self): return _cODP.ODPNode_next(self)
    def previous(self): return _cODP.ODPNode_previous(self)
    def poschar(self): return _cODP.ODPNode_poschar(self)
    __swig_destroy__ = _cODP.delete_ODPNode
    __del__ = lambda self : None;
ODPNode_swigregister = _cODP.ODPNode_swigregister
ODPNode_swigregister(ODPNode)

class ODPDOMImplementation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDOMImplementation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDOMImplementation, name)
    __repr__ = _swig_repr
    def hasFeature(self, *args): return _cODP.ODPDOMImplementation_hasFeature(self, *args)
    def __init__(self): 
        this = _cODP.new_ODPDOMImplementation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPDOMImplementation
    __del__ = lambda self : None;
ODPDOMImplementation_swigregister = _cODP.ODPDOMImplementation_swigregister
ODPDOMImplementation_swigregister(ODPDOMImplementation)

class ODPDocument(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDocument, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getDoctype(self): return _cODP.ODPDocument_getDoctype(self)
    def getImplementation(self): return _cODP.ODPDocument_getImplementation(self)
    def getDocumentElement(self): return _cODP.ODPDocument_getDocumentElement(self)
    def createElement(self, *args): return _cODP.ODPDocument_createElement(self, *args)
    def createDocumentFragment(self): return _cODP.ODPDocument_createDocumentFragment(self)
    def createTextNode(self, *args): return _cODP.ODPDocument_createTextNode(self, *args)
    def createComment(self, *args): return _cODP.ODPDocument_createComment(self, *args)
    def createCDATASection(self, *args): return _cODP.ODPDocument_createCDATASection(self, *args)
    def createProcessingInstruction(self, *args): return _cODP.ODPDocument_createProcessingInstruction(self, *args)
    def createAttribute(self, *args): return _cODP.ODPDocument_createAttribute(self, *args)
    def createEntityReference(self, *args): return _cODP.ODPDocument_createEntityReference(self, *args)
    def getElementsByTagName(self, *args): return _cODP.ODPDocument_getElementsByTagName(self, *args)
    __swig_destroy__ = _cODP.delete_ODPDocument
    __del__ = lambda self : None;
ODPDocument_swigregister = _cODP.ODPDocument_swigregister
ODPDocument_swigregister(ODPDocument)

class ODPDocumentParent(ODPDocument):
    __swig_setmethods__ = {}
    for _s in [ODPDocument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDocumentParent, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPDocument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDocumentParent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cODP.delete_ODPDocumentParent
    __del__ = lambda self : None;
ODPDocumentParent_swigregister = _cODP.ODPDocumentParent_swigregister
ODPDocumentParent_swigregister(ODPDocumentParent)

class ODPElement(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTagName(self): return _cODP.ODPElement_getTagName(self)
    def getAttribute(self, *args): return _cODP.ODPElement_getAttribute(self, *args)
    def setAttribute(self, *args): return _cODP.ODPElement_setAttribute(self, *args)
    def removeAttribute(self, *args): return _cODP.ODPElement_removeAttribute(self, *args)
    def getAttributeNode(self, *args): return _cODP.ODPElement_getAttributeNode(self, *args)
    def setAttributeNode(self, *args): return _cODP.ODPElement_setAttributeNode(self, *args)
    def removeAttributeNode(self, *args): return _cODP.ODPElement_removeAttributeNode(self, *args)
    def getElementsByTagName(self, *args): return _cODP.ODPElement_getElementsByTagName(self, *args)
    def normalize(self): return _cODP.ODPElement_normalize(self)
    def refreshAttr(self): return _cODP.ODPElement_refreshAttr(self)
    __swig_destroy__ = _cODP.delete_ODPElement
    __del__ = lambda self : None;
ODPElement_swigregister = _cODP.ODPElement_swigregister
ODPElement_swigregister(ODPElement)

class ODPCharacterData(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPCharacterData, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPCharacterData, name)
    __repr__ = _swig_repr
    def getData(self): return _cODP.ODPCharacterData_getData(self)
    def setData(self, *args): return _cODP.ODPCharacterData_setData(self, *args)
    def __init__(self, *args): 
        this = _cODP.new_ODPCharacterData(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLength(self): return _cODP.ODPCharacterData_getLength(self)
    def substringData(self, *args): return _cODP.ODPCharacterData_substringData(self, *args)
    def appendData(self, *args): return _cODP.ODPCharacterData_appendData(self, *args)
    def insertData(self, *args): return _cODP.ODPCharacterData_insertData(self, *args)
    def deleteData(self, *args): return _cODP.ODPCharacterData_deleteData(self, *args)
    def replaceData(self, *args): return _cODP.ODPCharacterData_replaceData(self, *args)
    __swig_destroy__ = _cODP.delete_ODPCharacterData
    __del__ = lambda self : None;
ODPCharacterData_swigregister = _cODP.ODPCharacterData_swigregister
ODPCharacterData_swigregister(ODPCharacterData)

class ODPText(ODPCharacterData):
    __swig_setmethods__ = {}
    for _s in [ODPCharacterData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPText, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPCharacterData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPText(*args)
        try: self.this.append(this)
        except: self.this = this
    def splitText(self, *args): return _cODP.ODPText_splitText(self, *args)
    __swig_destroy__ = _cODP.delete_ODPText
    __del__ = lambda self : None;
ODPText_swigregister = _cODP.ODPText_swigregister
ODPText_swigregister(ODPText)

class ODPComment(ODPCharacterData):
    __swig_setmethods__ = {}
    for _s in [ODPCharacterData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPComment, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPCharacterData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPComment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPComment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPComment
    __del__ = lambda self : None;
ODPComment_swigregister = _cODP.ODPComment_swigregister
ODPComment_swigregister(ODPComment)

class ODPCDATASection(ODPText):
    __swig_setmethods__ = {}
    for _s in [ODPText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPCDATASection, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPCDATASection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPCDATASection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPCDATASection
    __del__ = lambda self : None;
ODPCDATASection_swigregister = _cODP.ODPCDATASection_swigregister
ODPCDATASection_swigregister(ODPCDATASection)

class ODPNodeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNodeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNodeList, name)
    __repr__ = _swig_repr
    def item(self, *args): return _cODP.ODPNodeList_item(self, *args)
    def getLength(self): return _cODP.ODPNodeList_getLength(self)
    def __init__(self): 
        this = _cODP.new_ODPNodeList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPNodeList
    __del__ = lambda self : None;
ODPNodeList_swigregister = _cODP.ODPNodeList_swigregister
ODPNodeList_swigregister(ODPNodeList)

class ODPChildList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPChildList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPChildList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPChildList(*args)
        try: self.this.append(this)
        except: self.this = this
    def item(self, *args): return _cODP.ODPChildList_item(self, *args)
    def getLength(self): return _cODP.ODPChildList_getLength(self)
    __swig_destroy__ = _cODP.delete_ODPChildList
    __del__ = lambda self : None;
ODPChildList_swigregister = _cODP.ODPChildList_swigregister
ODPChildList_swigregister(ODPChildList)

class ODPElementsByTagNameList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPElementsByTagNameList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPElementsByTagNameList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPElementsByTagNameList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPElementsByTagNameList
    __del__ = lambda self : None;
    def item(self, *args): return _cODP.ODPElementsByTagNameList_item(self, *args)
    def getLength(self): return _cODP.ODPElementsByTagNameList_getLength(self)
ODPElementsByTagNameList_swigregister = _cODP.ODPElementsByTagNameList_swigregister
ODPElementsByTagNameList_swigregister(ODPElementsByTagNameList)

class ODPChildrenByTagNameList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPChildrenByTagNameList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPChildrenByTagNameList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPChildrenByTagNameList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPChildrenByTagNameList
    __del__ = lambda self : None;
    def item(self, *args): return _cODP.ODPChildrenByTagNameList_item(self, *args)
    def getLength(self): return _cODP.ODPChildrenByTagNameList_getLength(self)
ODPChildrenByTagNameList_swigregister = _cODP.ODPChildrenByTagNameList_swigregister
ODPChildrenByTagNameList_swigregister(ODPChildrenByTagNameList)

class ODPNamedNodeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNamedNodeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNamedNodeMap, name)
    __repr__ = _swig_repr
    def getNamedItem(self, *args): return _cODP.ODPNamedNodeMap_getNamedItem(self, *args)
    def setNamedItem(self, *args): return _cODP.ODPNamedNodeMap_setNamedItem(self, *args)
    def removeNamedItem(self, *args): return _cODP.ODPNamedNodeMap_removeNamedItem(self, *args)
    def item(self, *args): return _cODP.ODPNamedNodeMap_item(self, *args)
    def getLength(self): return _cODP.ODPNamedNodeMap_getLength(self)
    def __init__(self): 
        this = _cODP.new_ODPNamedNodeMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cODP.delete_ODPNamedNodeMap
    __del__ = lambda self : None;
ODPNamedNodeMap_swigregister = _cODP.ODPNamedNodeMap_swigregister
ODPNamedNodeMap_swigregister(ODPNamedNodeMap)

class ODPAttributeMap(ODPNamedNodeMap):
    __swig_setmethods__ = {}
    for _s in [ODPNamedNodeMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPAttributeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNamedNodeMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPAttributeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPAttributeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def setNode(self, *args): return _cODP.ODPAttributeMap_setNode(self, *args)
    def getAttribute(self, *args): return _cODP.ODPAttributeMap_getAttribute(self, *args)
    def getNamedItem(self, *args): return _cODP.ODPAttributeMap_getNamedItem(self, *args)
    def item(self, *args): return _cODP.ODPAttributeMap_item(self, *args)
    def getLength(self): return _cODP.ODPAttributeMap_getLength(self)
    __swig_destroy__ = _cODP.delete_ODPAttributeMap
    __del__ = lambda self : None;
ODPAttributeMap_swigregister = _cODP.ODPAttributeMap_swigregister
ODPAttributeMap_swigregister(ODPAttributeMap)

class ODPAttr(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPAttr, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPAttr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cODP.new_ODPAttr(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _cODP.ODPAttr_getName(self)
    def getSpecified(self): return _cODP.ODPAttr_getSpecified(self)
    def getValue(self): return _cODP.ODPAttr_getValue(self)
    def setValue(self, *args): return _cODP.ODPAttr_setValue(self, *args)
    __swig_destroy__ = _cODP.delete_ODPAttr
    __del__ = lambda self : None;
ODPAttr_swigregister = _cODP.ODPAttr_swigregister
ODPAttr_swigregister(ODPAttr)

# This file is compatible with both classic and new-style classes.


