# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cp4vasp', [dirname(__file__)])
        except ImportError:
            import _cp4vasp
            return _cp4vasp
        if fp is not None:
            try:
                _mod = imp.load_module('_cp4vasp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cp4vasp = swig_import_helper()
    del swig_import_helper
else:
    import _cp4vasp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ClassInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassInterface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_ClassInterface()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.ClassInterface_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_ClassInterface
    __del__ = lambda self : None;
ClassInterface_swigregister = _cp4vasp.ClassInterface_swigregister
ClassInterface_swigregister(ClassInterface)


def getAtomtypesRecordHash(*args):
  return _cp4vasp.getAtomtypesRecordHash(*args)
getAtomtypesRecordHash = _cp4vasp.getAtomtypesRecordHash
class AtomtypesRecord(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomtypesRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomtypesRecord, name)
    __repr__ = _swig_repr
    def getClassName(self): return _cp4vasp.AtomtypesRecord_getClassName(self)
    def __init__(self): 
        this = _cp4vasp.new_AtomtypesRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_AtomtypesRecord
    __del__ = lambda self : None;
    __swig_setmethods__["hash"] = _cp4vasp.AtomtypesRecord_hash_set
    __swig_getmethods__["hash"] = _cp4vasp.AtomtypesRecord_hash_get
    if _newclass:hash = _swig_property(_cp4vasp.AtomtypesRecord_hash_get, _cp4vasp.AtomtypesRecord_hash_set)
    __swig_setmethods__["atomspertype"] = _cp4vasp.AtomtypesRecord_atomspertype_set
    __swig_getmethods__["atomspertype"] = _cp4vasp.AtomtypesRecord_atomspertype_get
    if _newclass:atomspertype = _swig_property(_cp4vasp.AtomtypesRecord_atomspertype_get, _cp4vasp.AtomtypesRecord_atomspertype_set)
    __swig_setmethods__["mass"] = _cp4vasp.AtomtypesRecord_mass_set
    __swig_getmethods__["mass"] = _cp4vasp.AtomtypesRecord_mass_get
    if _newclass:mass = _swig_property(_cp4vasp.AtomtypesRecord_mass_get, _cp4vasp.AtomtypesRecord_mass_set)
    __swig_setmethods__["valence"] = _cp4vasp.AtomtypesRecord_valence_set
    __swig_getmethods__["valence"] = _cp4vasp.AtomtypesRecord_valence_get
    if _newclass:valence = _swig_property(_cp4vasp.AtomtypesRecord_valence_get, _cp4vasp.AtomtypesRecord_valence_set)
    __swig_setmethods__["radius"] = _cp4vasp.AtomtypesRecord_radius_set
    __swig_getmethods__["radius"] = _cp4vasp.AtomtypesRecord_radius_get
    if _newclass:radius = _swig_property(_cp4vasp.AtomtypesRecord_radius_get, _cp4vasp.AtomtypesRecord_radius_set)
    __swig_setmethods__["covalent"] = _cp4vasp.AtomtypesRecord_covalent_set
    __swig_getmethods__["covalent"] = _cp4vasp.AtomtypesRecord_covalent_get
    if _newclass:covalent = _swig_property(_cp4vasp.AtomtypesRecord_covalent_get, _cp4vasp.AtomtypesRecord_covalent_set)
    __swig_setmethods__["n"] = _cp4vasp.AtomtypesRecord_n_set
    __swig_getmethods__["n"] = _cp4vasp.AtomtypesRecord_n_get
    if _newclass:n = _swig_property(_cp4vasp.AtomtypesRecord_n_get, _cp4vasp.AtomtypesRecord_n_set)
    __swig_setmethods__["red"] = _cp4vasp.AtomtypesRecord_red_set
    __swig_getmethods__["red"] = _cp4vasp.AtomtypesRecord_red_get
    if _newclass:red = _swig_property(_cp4vasp.AtomtypesRecord_red_get, _cp4vasp.AtomtypesRecord_red_set)
    __swig_setmethods__["green"] = _cp4vasp.AtomtypesRecord_green_set
    __swig_getmethods__["green"] = _cp4vasp.AtomtypesRecord_green_get
    if _newclass:green = _swig_property(_cp4vasp.AtomtypesRecord_green_get, _cp4vasp.AtomtypesRecord_green_set)
    __swig_setmethods__["blue"] = _cp4vasp.AtomtypesRecord_blue_set
    __swig_getmethods__["blue"] = _cp4vasp.AtomtypesRecord_blue_get
    if _newclass:blue = _swig_property(_cp4vasp.AtomtypesRecord_blue_get, _cp4vasp.AtomtypesRecord_blue_set)
    __swig_setmethods__["hidden"] = _cp4vasp.AtomtypesRecord_hidden_set
    __swig_getmethods__["hidden"] = _cp4vasp.AtomtypesRecord_hidden_get
    if _newclass:hidden = _swig_property(_cp4vasp.AtomtypesRecord_hidden_get, _cp4vasp.AtomtypesRecord_hidden_set)
    __swig_setmethods__["selected"] = _cp4vasp.AtomtypesRecord_selected_set
    __swig_getmethods__["selected"] = _cp4vasp.AtomtypesRecord_selected_get
    if _newclass:selected = _swig_property(_cp4vasp.AtomtypesRecord_selected_get, _cp4vasp.AtomtypesRecord_selected_set)
    def getElement(self): return _cp4vasp.AtomtypesRecord_getElement(self)
    def setElement(self, *args): return _cp4vasp.AtomtypesRecord_setElement(self, *args)
    def getPPType(self): return _cp4vasp.AtomtypesRecord_getPPType(self)
    def getPPSpecie(self): return _cp4vasp.AtomtypesRecord_getPPSpecie(self)
    def getPPVersion(self): return _cp4vasp.AtomtypesRecord_getPPVersion(self)
    def getPseudopotential(self): return _cp4vasp.AtomtypesRecord_getPseudopotential(self)
    def setPPType(self, *args): return _cp4vasp.AtomtypesRecord_setPPType(self, *args)
    def setPPSpecie(self, *args): return _cp4vasp.AtomtypesRecord_setPPSpecie(self, *args)
    def setPPVersion(self, *args): return _cp4vasp.AtomtypesRecord_setPPVersion(self, *args)
    def setPseudopotential(self, *args): return _cp4vasp.AtomtypesRecord_setPseudopotential(self, *args)
    def clean(self): return _cp4vasp.AtomtypesRecord_clean(self)
    def setAtomtypesRecord(self, *args): return _cp4vasp.AtomtypesRecord_setAtomtypesRecord(self, *args)
    def clone(self): return _cp4vasp.AtomtypesRecord_clone(self)
AtomtypesRecord_swigregister = _cp4vasp.AtomtypesRecord_swigregister
AtomtypesRecord_swigregister(AtomtypesRecord)

class AtomInfo(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomInfo, name)
    __repr__ = _swig_repr
    def getClassName(self): return _cp4vasp.AtomInfo_getClassName(self)
    __swig_getmethods__["types"] = _cp4vasp.AtomInfo_types_get
    if _newclass:types = _swig_property(_cp4vasp.AtomInfo_types_get)
    __swig_getmethods__["allocation_step"] = _cp4vasp.AtomInfo_allocation_step_get
    if _newclass:allocation_step = _swig_property(_cp4vasp.AtomInfo_allocation_step_get)
    def __init__(self, alloc=16): 
        this = _cp4vasp.new_AtomInfo(alloc)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_AtomInfo
    __del__ = lambda self : None;
    def append(self, *args): return _cp4vasp.AtomInfo_append(self, *args)
    def realloc(self, *args): return _cp4vasp.AtomInfo_realloc(self, *args)
    def allocate(self, *args): return _cp4vasp.AtomInfo_allocate(self, *args)
    def getRecord(self, *args): return _cp4vasp.AtomInfo_getRecord(self, *args)
    def setRecord(self, *args): return _cp4vasp.AtomInfo_setRecord(self, *args)
    def getRecordForAtom(self, *args): return _cp4vasp.AtomInfo_getRecordForAtom(self, *args)
    def getRecordForElement(self, *args): return _cp4vasp.AtomInfo_getRecordForElement(self, *args)
    def getRecordForElementSafe(self, *args): return _cp4vasp.AtomInfo_getRecordForElementSafe(self, *args)
    def speciesIndex(self, *args): return _cp4vasp.AtomInfo_speciesIndex(self, *args)
    def getNatoms(self): return _cp4vasp.AtomInfo_getNatoms(self)
    def setAtomInfo(self, *args): return _cp4vasp.AtomInfo_setAtomInfo(self, *args)
    def clean(self): return _cp4vasp.AtomInfo_clean(self)
    def clone(self): return _cp4vasp.AtomInfo_clone(self)
    def delitem(self, *args): return _cp4vasp.AtomInfo_delitem(self, *args)
    def len(self): return _cp4vasp.AtomInfo_len(self)
    def fillAttributesWithTable(self, *args): return _cp4vasp.AtomInfo_fillAttributesWithTable(self, *args)
AtomInfo_swigregister = _cp4vasp.AtomInfo_swigregister
AtomInfo_swigregister(AtomInfo)


def setvec3d(*args):
  return _cp4vasp.setvec3d(*args)
setvec3d = _cp4vasp.setvec3d

def deletevec3d(*args):
  return _cp4vasp.deletevec3d(*args)
deletevec3d = _cp4vasp.deletevec3d

def createmat3d(*args):
  return _cp4vasp.createmat3d(*args)
createmat3d = _cp4vasp.createmat3d

def setmat3d(*args):
  return _cp4vasp.setmat3d(*args)
setmat3d = _cp4vasp.setmat3d

def deletemat3d(*args):
  return _cp4vasp.deletemat3d(*args)
deletemat3d = _cp4vasp.deletemat3d

def getVecElement3d(*args):
  return _cp4vasp.getVecElement3d(*args)
getVecElement3d = _cp4vasp.getVecElement3d

def setVecElement3d(*args):
  return _cp4vasp.setVecElement3d(*args)
setVecElement3d = _cp4vasp.setVecElement3d

def getMatVecElement3d(*args):
  return _cp4vasp.getMatVecElement3d(*args)
getMatVecElement3d = _cp4vasp.getMatVecElement3d

def setMatVecElement3d(*args):
  return _cp4vasp.setMatVecElement3d(*args)
setMatVecElement3d = _cp4vasp.setMatVecElement3d

def getMatElement3d(*args):
  return _cp4vasp.getMatElement3d(*args)
getMatElement3d = _cp4vasp.getMatElement3d

def setMatElement3d(*args):
  return _cp4vasp.setMatElement3d(*args)
setMatElement3d = _cp4vasp.setMatElement3d

def add3d(*args):
  return _cp4vasp.add3d(*args)
add3d = _cp4vasp.add3d

def plus3d(*args):
  return _cp4vasp.plus3d(*args)
plus3d = _cp4vasp.plus3d

def createplus3d(*args):
  return _cp4vasp.createplus3d(*args)
createplus3d = _cp4vasp.createplus3d

def createplusmat3d(*args):
  return _cp4vasp.createplusmat3d(*args)
createplusmat3d = _cp4vasp.createplusmat3d

def sub3d(*args):
  return _cp4vasp.sub3d(*args)
sub3d = _cp4vasp.sub3d

def minus3d(*args):
  return _cp4vasp.minus3d(*args)
minus3d = _cp4vasp.minus3d

def createminus3d(*args):
  return _cp4vasp.createminus3d(*args)
createminus3d = _cp4vasp.createminus3d

def createminusmat3d(*args):
  return _cp4vasp.createminusmat3d(*args)
createminusmat3d = _cp4vasp.createminusmat3d

def neg3d(*args):
  return _cp4vasp.neg3d(*args)
neg3d = _cp4vasp.neg3d

def createneg3d(*args):
  return _cp4vasp.createneg3d(*args)
createneg3d = _cp4vasp.createneg3d

def createnegmat3d(*args):
  return _cp4vasp.createnegmat3d(*args)
createnegmat3d = _cp4vasp.createnegmat3d

def scalmul3d(*args):
  return _cp4vasp.scalmul3d(*args)
scalmul3d = _cp4vasp.scalmul3d

def createscalmultiply3d(*args):
  return _cp4vasp.createscalmultiply3d(*args)
createscalmultiply3d = _cp4vasp.createscalmultiply3d

def scaldiv3d(*args):
  return _cp4vasp.scaldiv3d(*args)
scaldiv3d = _cp4vasp.scaldiv3d

def createscaldivide3d(*args):
  return _cp4vasp.createscaldivide3d(*args)
createscaldivide3d = _cp4vasp.createscaldivide3d

def copy3d(*args):
  return _cp4vasp.copy3d(*args)
copy3d = _cp4vasp.copy3d

def clone3d(*args):
  return _cp4vasp.clone3d(*args)
clone3d = _cp4vasp.clone3d

def copymat3d(*args):
  return _cp4vasp.copymat3d(*args)
copymat3d = _cp4vasp.copymat3d

def clonemat3d(*args):
  return _cp4vasp.clonemat3d(*args)
clonemat3d = _cp4vasp.clonemat3d

def veclength3d(*args):
  return _cp4vasp.veclength3d(*args)
veclength3d = _cp4vasp.veclength3d

def normalize3d(*args):
  return _cp4vasp.normalize3d(*args)
normalize3d = _cp4vasp.normalize3d

def scalprod3d(*args):
  return _cp4vasp.scalprod3d(*args)
scalprod3d = _cp4vasp.scalprod3d

def crossprod3d(*args):
  return _cp4vasp.crossprod3d(*args)
crossprod3d = _cp4vasp.crossprod3d

def createcrossprod3d(*args):
  return _cp4vasp.createcrossprod3d(*args)
createcrossprod3d = _cp4vasp.createcrossprod3d

def createmultiplymatscal3d(*args):
  return _cp4vasp.createmultiplymatscal3d(*args)
createmultiplymatscal3d = _cp4vasp.createmultiplymatscal3d

def createmultiplymatvec3d(*args):
  return _cp4vasp.createmultiplymatvec3d(*args)
createmultiplymatvec3d = _cp4vasp.createmultiplymatvec3d

def multiplymatvec3d(*args):
  return _cp4vasp.multiplymatvec3d(*args)
multiplymatvec3d = _cp4vasp.multiplymatvec3d

def mulmatvec3d(*args):
  return _cp4vasp.mulmatvec3d(*args)
mulmatvec3d = _cp4vasp.mulmatvec3d

def multiplymatmat3d(*args):
  return _cp4vasp.multiplymatmat3d(*args)
multiplymatmat3d = _cp4vasp.multiplymatmat3d

def createmultiplymatmat3d(*args):
  return _cp4vasp.createmultiplymatmat3d(*args)
createmultiplymatmat3d = _cp4vasp.createmultiplymatmat3d

def mulmatmat3d(*args):
  return _cp4vasp.mulmatmat3d(*args)
mulmatmat3d = _cp4vasp.mulmatmat3d

def createrotmat3d(*args):
  return _cp4vasp.createrotmat3d(*args)
createrotmat3d = _cp4vasp.createrotmat3d

def createrotmat3da(*args):
  return _cp4vasp.createrotmat3da(*args)
createrotmat3da = _cp4vasp.createrotmat3da

def identitymat3d(*args):
  return _cp4vasp.identitymat3d(*args)
identitymat3d = _cp4vasp.identitymat3d

def createidentitymat3d():
  return _cp4vasp.createidentitymat3d()
createidentitymat3d = _cp4vasp.createidentitymat3d

def zeromat3d(*args):
  return _cp4vasp.zeromat3d(*args)
zeromat3d = _cp4vasp.zeromat3d

def createzeromat3d():
  return _cp4vasp.createzeromat3d()
createzeromat3d = _cp4vasp.createzeromat3d

def detmat3d(*args):
  return _cp4vasp.detmat3d(*args)
detmat3d = _cp4vasp.detmat3d

def transmat3d(*args):
  return _cp4vasp.transmat3d(*args)
transmat3d = _cp4vasp.transmat3d
class FArray1D(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FArray1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FArray1D, name)
    __repr__ = _swig_repr
    def __init__(self, size=0): 
        this = _cp4vasp.new_FArray1D(size)
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _cp4vasp.FArray1D_clear(self)
    def size(self): return _cp4vasp.FArray1D_size(self)
    def get(self, *args): return _cp4vasp.FArray1D_get(self, *args)
    def set(self, *args): return _cp4vasp.FArray1D_set(self, *args)
    def printrepr(self): return _cp4vasp.FArray1D_printrepr(self)
    def parseString(self, *args): return _cp4vasp.FArray1D_parseString(self, *args)
    def cloneBuff(self): return _cp4vasp.FArray1D_cloneBuff(self)
    def clone(self): return _cp4vasp.FArray1D_clone(self)
    def getMinimum(self): return _cp4vasp.FArray1D_getMinimum(self)
    def getMaximum(self): return _cp4vasp.FArray1D_getMaximum(self)
    def getAverage(self): return _cp4vasp.FArray1D_getAverage(self)
    def getVariance(self): return _cp4vasp.FArray1D_getVariance(self)
    def getSigma(self): return _cp4vasp.FArray1D_getSigma(self)
    def getClassName(self): return _cp4vasp.FArray1D_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_FArray1D
    __del__ = lambda self : None;
FArray1D_swigregister = _cp4vasp.FArray1D_swigregister
FArray1D_swigregister(FArray1D)

class FArray2D(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FArray2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FArray2D, name)
    __repr__ = _swig_repr
    def __init__(self, sizex=0, sizey=0): 
        this = _cp4vasp.new_FArray2D(sizex, sizey)
        try: self.this.append(this)
        except: self.this = this
    def getMinimum(self): return _cp4vasp.FArray2D_getMinimum(self)
    def getMaximum(self): return _cp4vasp.FArray2D_getMaximum(self)
    def getAverage(self): return _cp4vasp.FArray2D_getAverage(self)
    def getVariance(self): return _cp4vasp.FArray2D_getVariance(self)
    def getSigma(self): return _cp4vasp.FArray2D_getSigma(self)
    def sizeX(self): return _cp4vasp.FArray2D_sizeX(self)
    def sizeY(self): return _cp4vasp.FArray2D_sizeY(self)
    def clear(self): return _cp4vasp.FArray2D_clear(self)
    def get(self, *args): return _cp4vasp.FArray2D_get(self, *args)
    def set(self, *args): return _cp4vasp.FArray2D_set(self, *args)
    def printrepr(self): return _cp4vasp.FArray2D_printrepr(self)
    def parseString(self, *args): return _cp4vasp.FArray2D_parseString(self, *args)
    def getArray(self, *args): return _cp4vasp.FArray2D_getArray(self, *args)
    def cloneBuff(self): return _cp4vasp.FArray2D_cloneBuff(self)
    def clone(self): return _cp4vasp.FArray2D_clone(self)
    def cubicInterpolation(self, *args): return _cp4vasp.FArray2D_cubicInterpolation(self, *args)
    def smear(self, *args): return _cp4vasp.FArray2D_smear(self, *args)
    def cloneVector(self, *args): return _cp4vasp.FArray2D_cloneVector(self, *args)
    def getClassName(self): return _cp4vasp.FArray2D_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_FArray2D
    __del__ = lambda self : None;
FArray2D_swigregister = _cp4vasp.FArray2D_swigregister
FArray2D_swigregister(FArray2D)


def createvec3d(*args):
  return _cp4vasp.createvec3d(*args)
createvec3d = _cp4vasp.createvec3d

def createFArray1Dsimple(*args):
  return _cp4vasp.createFArray1Dsimple(*args)
createFArray1Dsimple = _cp4vasp.createFArray1Dsimple

def createFArray2Dsimple(*args):
  return _cp4vasp.createFArray2Dsimple(*args)
createFArray2Dsimple = _cp4vasp.createFArray2Dsimple

def createFArray2DsimpleN(*args):
  return _cp4vasp.createFArray2DsimpleN(*args)
createFArray2DsimpleN = _cp4vasp.createFArray2DsimpleN

def createStructure(*args):
  return _cp4vasp.createStructure(*args)
createStructure = _cp4vasp.createStructure

def createStructureN(*args):
  return _cp4vasp.createStructureN(*args)
createStructureN = _cp4vasp.createStructureN
class Structure(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Structure, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Structure, name)
    __repr__ = _swig_repr
    def getClassName(self): return _cp4vasp.Structure_getClassName(self)
    __swig_setmethods__["scaling_flag"] = _cp4vasp.Structure_scaling_flag_set
    __swig_getmethods__["scaling_flag"] = _cp4vasp.Structure_scaling_flag_get
    if _newclass:scaling_flag = _swig_property(_cp4vasp.Structure_scaling_flag_get, _cp4vasp.Structure_scaling_flag_set)
    __swig_setmethods__["allocation_step"] = _cp4vasp.Structure_allocation_step_set
    __swig_getmethods__["allocation_step"] = _cp4vasp.Structure_allocation_step_get
    if _newclass:allocation_step = _swig_property(_cp4vasp.Structure_allocation_step_get, _cp4vasp.Structure_allocation_step_set)
    __swig_getmethods__["scaling"] = _cp4vasp.Structure_scaling_get
    if _newclass:scaling = _swig_property(_cp4vasp.Structure_scaling_get)
    __swig_getmethods__["basis"] = _cp4vasp.Structure_basis_get
    if _newclass:basis = _swig_property(_cp4vasp.Structure_basis_get)
    __swig_getmethods__["rbasis"] = _cp4vasp.Structure_rbasis_get
    if _newclass:rbasis = _swig_property(_cp4vasp.Structure_rbasis_get)
    __swig_getmethods__["total_number_of_atoms"] = _cp4vasp.Structure_total_number_of_atoms_get
    if _newclass:total_number_of_atoms = _swig_property(_cp4vasp.Structure_total_number_of_atoms_get)
    __swig_getmethods__["allocated"] = _cp4vasp.Structure_allocated_get
    if _newclass:allocated = _swig_property(_cp4vasp.Structure_allocated_get)
    __swig_getmethods__["info"] = _cp4vasp.Structure_info_get
    if _newclass:info = _swig_property(_cp4vasp.Structure_info_get)
    __swig_setmethods__["comment"] = _cp4vasp.Structure_comment_set
    __swig_getmethods__["comment"] = _cp4vasp.Structure_comment_get
    if _newclass:comment = _swig_property(_cp4vasp.Structure_comment_get, _cp4vasp.Structure_comment_set)
    __swig_setmethods__["coordinates"] = _cp4vasp.Structure_coordinates_set
    __swig_getmethods__["coordinates"] = _cp4vasp.Structure_coordinates_get
    if _newclass:coordinates = _swig_property(_cp4vasp.Structure_coordinates_get, _cp4vasp.Structure_coordinates_set)
    def __init__(self, *args): 
        this = _cp4vasp.new_Structure(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_Structure
    __del__ = lambda self : None;
    def correctScaling(self): return _cp4vasp.Structure_correctScaling(self)
    def parse(self, *args): return _cp4vasp.Structure_parse(self, *args)
    def read(self, *args): return _cp4vasp.Structure_read(self, *args)
    def write(self, *args): return _cp4vasp.Structure_write(self, *args)
    def toString(self): return _cp4vasp.Structure_toString(self)
    def isSelective(self): return _cp4vasp.Structure_isSelective(self)
    def isCarthesian(self): return _cp4vasp.Structure_isCarthesian(self)
    def isDirect(self): return _cp4vasp.Structure_isDirect(self)
    def getSelectiveDOF(self, *args): return _cp4vasp.Structure_getSelectiveDOF(self, *args)
    def setSelectiveDOF(self, *args): return _cp4vasp.Structure_setSelectiveDOF(self, *args)
    def setSelective(self, *args): return _cp4vasp.Structure_setSelective(self, *args)
    def updateRecipBasis(self): return _cp4vasp.Structure_updateRecipBasis(self)
    def getRecipBasis(self): return _cp4vasp.Structure_getRecipBasis(self)
    def forceConvertToCarthesian(self): return _cp4vasp.Structure_forceConvertToCarthesian(self)
    def forceConvertToDirect(self): return _cp4vasp.Structure_forceConvertToDirect(self)
    def setCarthesian(self, flag=1): return _cp4vasp.Structure_setCarthesian(self, flag)
    def setDirect(self, flag=1): return _cp4vasp.Structure_setDirect(self, flag)
    def dir2cart(self, *args): return _cp4vasp.Structure_dir2cart(self, *args)
    def cart2dir(self, *args): return _cp4vasp.Structure_cart2dir(self, *args)
    def dirVectorToUnitCell(self, *args): return _cp4vasp.Structure_dirVectorToUnitCell(self, *args)
    def dirVectorToCenteredUnitCell(self, *args): return _cp4vasp.Structure_dirVectorToCenteredUnitCell(self, *args)
    def cartVectorToUnitCell(self, *args): return _cp4vasp.Structure_cartVectorToUnitCell(self, *args)
    def cartVectorToCenteredUnitCell(self, *args): return _cp4vasp.Structure_cartVectorToCenteredUnitCell(self, *args)
    def vectorToUnitCell(self, *args): return _cp4vasp.Structure_vectorToUnitCell(self, *args)
    def vectorToCenteredUnitCell(self, *args): return _cp4vasp.Structure_vectorToCenteredUnitCell(self, *args)
    def toUnitCell(self): return _cp4vasp.Structure_toUnitCell(self)
    def toCenteredUnitCell(self): return _cp4vasp.Structure_toCenteredUnitCell(self)
    def mindistCartVectors(self, *args): return _cp4vasp.Structure_mindistCartVectors(self, *args)
    def mindistDirVectors(self, *args): return _cp4vasp.Structure_mindistDirVectors(self, *args)
    def createMindistMatrix(self): return _cp4vasp.Structure_createMindistMatrix(self)
    def deleteMindistMatrix(self): return _cp4vasp.Structure_deleteMindistMatrix(self)
    def getMindist(self, *args): return _cp4vasp.Structure_getMindist(self, *args)
    def clean(self): return _cp4vasp.Structure_clean(self)
    def setStructure(self, *args): return _cp4vasp.Structure_setStructure(self, *args)
    def clone(self): return _cp4vasp.Structure_clone(self)
    def len(self): return _cp4vasp.Structure_len(self)
    def getNumberOfSpecies(self): return _cp4vasp.Structure_getNumberOfSpecies(self)
    def getRecord(self, *args): return _cp4vasp.Structure_getRecord(self, *args)
    def get(self, *args): return _cp4vasp.Structure_get(self, *args)
    def set(self, *args): return _cp4vasp.Structure_set(self, *args)
    def allocate(self, *args): return _cp4vasp.Structure_allocate(self, *args)
    def realloc(self, *args): return _cp4vasp.Structure_realloc(self, *args)
    def append(self, *args): return _cp4vasp.Structure_append(self, *args)
    def delitem(self, *args): return _cp4vasp.Structure_delitem(self, *args)
    def setScaling(self, *args): return _cp4vasp.Structure_setScaling(self, *args)
Structure_swigregister = _cp4vasp.Structure_swigregister
Structure_swigregister(Structure)

class Process(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Process, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Process, name)
    __repr__ = _swig_repr
    def total(self): return _cp4vasp.Process_total(self)
    def step(self): return _cp4vasp.Process_step(self)
    def status(self): return _cp4vasp.Process_status(self)
    def error(self): return _cp4vasp.Process_error(self)
    def next(self): return _cp4vasp.Process_next(self)
    __swig_destroy__ = _cp4vasp.delete_Process
    __del__ = lambda self : None;
    def __init__(self): 
        this = _cp4vasp.new_Process()
        try: self.this.append(this)
        except: self.this = this
Process_swigregister = _cp4vasp.Process_swigregister
Process_swigregister(Process)

class ReadChgcarProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadChgcarProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadChgcarProcess, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self): return _cp4vasp.ReadChgcarProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ReadChgcarProcess
    __del__ = lambda self : None;
ReadChgcarProcess_swigregister = _cp4vasp.ReadChgcarProcess_swigregister
ReadChgcarProcess_swigregister(ReadChgcarProcess)

class ChgcarPlaneProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChgcarPlaneProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChgcarPlaneProcess, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def next(self): return _cp4vasp.ChgcarPlaneProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarPlaneProcess
    __del__ = lambda self : None;
    def getPlane(self): return _cp4vasp.ChgcarPlaneProcess_getPlane(self)
ChgcarPlaneProcess_swigregister = _cp4vasp.ChgcarPlaneProcess_swigregister
ChgcarPlaneProcess_swigregister(ChgcarPlaneProcess)

class Chgcar(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chgcar, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Chgcar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plane_minimum"] = _cp4vasp.Chgcar_plane_minimum_set
    __swig_getmethods__["plane_minimum"] = _cp4vasp.Chgcar_plane_minimum_get
    if _newclass:plane_minimum = _swig_property(_cp4vasp.Chgcar_plane_minimum_get, _cp4vasp.Chgcar_plane_minimum_set)
    __swig_setmethods__["plane_maximum"] = _cp4vasp.Chgcar_plane_maximum_set
    __swig_getmethods__["plane_maximum"] = _cp4vasp.Chgcar_plane_maximum_get
    if _newclass:plane_maximum = _swig_property(_cp4vasp.Chgcar_plane_maximum_get, _cp4vasp.Chgcar_plane_maximum_set)
    __swig_setmethods__["plane_average"] = _cp4vasp.Chgcar_plane_average_set
    __swig_getmethods__["plane_average"] = _cp4vasp.Chgcar_plane_average_get
    if _newclass:plane_average = _swig_property(_cp4vasp.Chgcar_plane_average_get, _cp4vasp.Chgcar_plane_average_set)
    __swig_setmethods__["plane_variance"] = _cp4vasp.Chgcar_plane_variance_set
    __swig_getmethods__["plane_variance"] = _cp4vasp.Chgcar_plane_variance_get
    if _newclass:plane_variance = _swig_property(_cp4vasp.Chgcar_plane_variance_get, _cp4vasp.Chgcar_plane_variance_set)
    def getClassName(self): return _cp4vasp.Chgcar_getClassName(self)
    __swig_setmethods__["structure"] = _cp4vasp.Chgcar_structure_set
    __swig_getmethods__["structure"] = _cp4vasp.Chgcar_structure_get
    if _newclass:structure = _swig_property(_cp4vasp.Chgcar_structure_get, _cp4vasp.Chgcar_structure_set)
    __swig_setmethods__["nx"] = _cp4vasp.Chgcar_nx_set
    __swig_getmethods__["nx"] = _cp4vasp.Chgcar_nx_get
    if _newclass:nx = _swig_property(_cp4vasp.Chgcar_nx_get, _cp4vasp.Chgcar_nx_set)
    __swig_setmethods__["ny"] = _cp4vasp.Chgcar_ny_set
    __swig_getmethods__["ny"] = _cp4vasp.Chgcar_ny_get
    if _newclass:ny = _swig_property(_cp4vasp.Chgcar_ny_get, _cp4vasp.Chgcar_ny_set)
    __swig_setmethods__["nz"] = _cp4vasp.Chgcar_nz_set
    __swig_getmethods__["nz"] = _cp4vasp.Chgcar_nz_get
    if _newclass:nz = _swig_property(_cp4vasp.Chgcar_nz_get, _cp4vasp.Chgcar_nz_set)
    __swig_setmethods__["data"] = _cp4vasp.Chgcar_data_set
    __swig_getmethods__["data"] = _cp4vasp.Chgcar_data_get
    if _newclass:data = _swig_property(_cp4vasp.Chgcar_data_get, _cp4vasp.Chgcar_data_set)
    def __init__(self): 
        this = _cp4vasp.new_Chgcar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_Chgcar
    __del__ = lambda self : None;
    def subtractChgcar(self, *args): return _cp4vasp.Chgcar_subtractChgcar(self, *args)
    def calculateStatistics(self): return _cp4vasp.Chgcar_calculateStatistics(self)
    def getMinimum(self): return _cp4vasp.Chgcar_getMinimum(self)
    def getMaximum(self): return _cp4vasp.Chgcar_getMaximum(self)
    def getAverage(self): return _cp4vasp.Chgcar_getAverage(self)
    def getVariance(self): return _cp4vasp.Chgcar_getVariance(self)
    def getSigma(self): return _cp4vasp.Chgcar_getSigma(self)
    def clean(self): return _cp4vasp.Chgcar_clean(self)
    def read(self, *args): return _cp4vasp.Chgcar_read(self, *args)
    def createReadProcess(self, *args): return _cp4vasp.Chgcar_createReadProcess(self, *args)
    def write(self, *args): return _cp4vasp.Chgcar_write(self, *args)
    def get(self, *args): return _cp4vasp.Chgcar_get(self, *args)
    def getRaw(self, *args): return _cp4vasp.Chgcar_getRaw(self, *args)
    def set(self, *args): return _cp4vasp.Chgcar_set(self, *args)
    def setRaw(self, *args): return _cp4vasp.Chgcar_setRaw(self, *args)
    def getDirGrad(self, *args): return _cp4vasp.Chgcar_getDirGrad(self, *args)
    def getGrad(self, *args): return _cp4vasp.Chgcar_getGrad(self, *args)
    def downSampleByFactors(self, *args): return _cp4vasp.Chgcar_downSampleByFactors(self, *args)
    def sumElectrons(self): return _cp4vasp.Chgcar_sumElectrons(self)
    def gaussianSmearingX(self, *args): return _cp4vasp.Chgcar_gaussianSmearingX(self, *args)
    def gaussianSmearingY(self, *args): return _cp4vasp.Chgcar_gaussianSmearingY(self, *args)
    def gaussianSmearingZ(self, *args): return _cp4vasp.Chgcar_gaussianSmearingZ(self, *args)
    def clone(self): return _cp4vasp.Chgcar_clone(self)
    def setChgcar(self, *args): return _cp4vasp.Chgcar_setChgcar(self, *args)
    def calculatePlaneStatisticsX(self, *args): return _cp4vasp.Chgcar_calculatePlaneStatisticsX(self, *args)
    def calculatePlaneStatisticsY(self, *args): return _cp4vasp.Chgcar_calculatePlaneStatisticsY(self, *args)
    def calculatePlaneStatisticsZ(self, *args): return _cp4vasp.Chgcar_calculatePlaneStatisticsZ(self, *args)
    def searchMinPlaneX(self): return _cp4vasp.Chgcar_searchMinPlaneX(self)
    def searchMinPlaneY(self): return _cp4vasp.Chgcar_searchMinPlaneY(self)
    def searchMinPlaneZ(self): return _cp4vasp.Chgcar_searchMinPlaneZ(self)
    def getPlaneX(self, *args): return _cp4vasp.Chgcar_getPlaneX(self, *args)
    def getPlaneY(self, *args): return _cp4vasp.Chgcar_getPlaneY(self, *args)
    def getPlaneZ(self, *args): return _cp4vasp.Chgcar_getPlaneZ(self, *args)
    def createSmoothPlaneProcessX(self, *args): return _cp4vasp.Chgcar_createSmoothPlaneProcessX(self, *args)
    def createSmoothPlaneProcessY(self, *args): return _cp4vasp.Chgcar_createSmoothPlaneProcessY(self, *args)
    def createSmoothPlaneProcessZ(self, *args): return _cp4vasp.Chgcar_createSmoothPlaneProcessZ(self, *args)
    def createCCPlaneX(self, *args): return _cp4vasp.Chgcar_createCCPlaneX(self, *args)
    def createCCPlaneY(self, *args): return _cp4vasp.Chgcar_createCCPlaneY(self, *args)
    def createCCPlaneZ(self, *args): return _cp4vasp.Chgcar_createCCPlaneZ(self, *args)
    def createCCPlaneCubicX(self, *args): return _cp4vasp.Chgcar_createCCPlaneCubicX(self, *args)
    def createCCPlaneCubicY(self, *args): return _cp4vasp.Chgcar_createCCPlaneCubicY(self, *args)
    def createCCPlaneCubicZ(self, *args): return _cp4vasp.Chgcar_createCCPlaneCubicZ(self, *args)
Chgcar_swigregister = _cp4vasp.Chgcar_swigregister
Chgcar_swigregister(Chgcar)

class ChgcarSmear(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChgcarSmear, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChgcarSmear, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_ChgcarSmear()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.ChgcarSmear_getClassName(self)
    def setChgcar(self, *args): return _cp4vasp.ChgcarSmear_setChgcar(self, *args)
    def get(self, *args): return _cp4vasp.ChgcarSmear_get(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmear
    __del__ = lambda self : None;
ChgcarSmear_swigregister = _cp4vasp.ChgcarSmear_swigregister
ChgcarSmear_swigregister(ChgcarSmear)

class GaussianChgcarSmear(ChgcarSmear):
    __swig_setmethods__ = {}
    for _s in [ChgcarSmear]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianChgcarSmear, name, value)
    __swig_getmethods__ = {}
    for _s in [ChgcarSmear]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianChgcarSmear, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lx"] = _cp4vasp.GaussianChgcarSmear_lx_set
    __swig_getmethods__["lx"] = _cp4vasp.GaussianChgcarSmear_lx_get
    if _newclass:lx = _swig_property(_cp4vasp.GaussianChgcarSmear_lx_get, _cp4vasp.GaussianChgcarSmear_lx_set)
    __swig_setmethods__["ly"] = _cp4vasp.GaussianChgcarSmear_ly_set
    __swig_getmethods__["ly"] = _cp4vasp.GaussianChgcarSmear_ly_get
    if _newclass:ly = _swig_property(_cp4vasp.GaussianChgcarSmear_ly_get, _cp4vasp.GaussianChgcarSmear_ly_set)
    __swig_setmethods__["lz"] = _cp4vasp.GaussianChgcarSmear_lz_set
    __swig_getmethods__["lz"] = _cp4vasp.GaussianChgcarSmear_lz_get
    if _newclass:lz = _swig_property(_cp4vasp.GaussianChgcarSmear_lz_get, _cp4vasp.GaussianChgcarSmear_lz_set)
    __swig_setmethods__["dir"] = _cp4vasp.GaussianChgcarSmear_dir_set
    __swig_getmethods__["dir"] = _cp4vasp.GaussianChgcarSmear_dir_get
    if _newclass:dir = _swig_property(_cp4vasp.GaussianChgcarSmear_dir_get, _cp4vasp.GaussianChgcarSmear_dir_set)
    __swig_setmethods__["horizontal_sigma"] = _cp4vasp.GaussianChgcarSmear_horizontal_sigma_set
    __swig_getmethods__["horizontal_sigma"] = _cp4vasp.GaussianChgcarSmear_horizontal_sigma_get
    if _newclass:horizontal_sigma = _swig_property(_cp4vasp.GaussianChgcarSmear_horizontal_sigma_get, _cp4vasp.GaussianChgcarSmear_horizontal_sigma_set)
    __swig_setmethods__["vertical_sigma"] = _cp4vasp.GaussianChgcarSmear_vertical_sigma_set
    __swig_getmethods__["vertical_sigma"] = _cp4vasp.GaussianChgcarSmear_vertical_sigma_get
    if _newclass:vertical_sigma = _swig_property(_cp4vasp.GaussianChgcarSmear_vertical_sigma_get, _cp4vasp.GaussianChgcarSmear_vertical_sigma_set)
    def __init__(self): 
        this = _cp4vasp.new_GaussianChgcarSmear()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.GaussianChgcarSmear_getClassName(self)
    def setChgcar(self, *args): return _cp4vasp.GaussianChgcarSmear_setChgcar(self, *args)
    def get(self, *args): return _cp4vasp.GaussianChgcarSmear_get(self, *args)
    __swig_destroy__ = _cp4vasp.delete_GaussianChgcarSmear
    __del__ = lambda self : None;
GaussianChgcarSmear_swigregister = _cp4vasp.GaussianChgcarSmear_swigregister
GaussianChgcarSmear_swigregister(GaussianChgcarSmear)

class ChgcarSmearProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChgcarSmearProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChgcarSmearProcess, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ChgcarSmearProcess(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self): return _cp4vasp.ChgcarSmearProcess_next(self)
    def get(self): return _cp4vasp.ChgcarSmearProcess_get(self)
    def getClassName(self): return _cp4vasp.ChgcarSmearProcess_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmearProcess
    __del__ = lambda self : None;
ChgcarSmearProcess_swigregister = _cp4vasp.ChgcarSmearProcess_swigregister
ChgcarSmearProcess_swigregister(ChgcarSmearProcess)

class ChgcarSmearPlaneProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChgcarSmearPlaneProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChgcarSmearPlaneProcess, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ChgcarSmearPlaneProcess(*args)
        try: self.this.append(this)
        except: self.this = this
    def planeName(self, *args): return _cp4vasp.ChgcarSmearPlaneProcess_planeName(self, *args)
    def next(self): return _cp4vasp.ChgcarSmearPlaneProcess_next(self)
    __swig_destroy__ = _cp4vasp.delete_ChgcarSmearPlaneProcess
    __del__ = lambda self : None;
    def getClassName(self): return _cp4vasp.ChgcarSmearPlaneProcess_getClassName(self)
    def getPlane(self): return _cp4vasp.ChgcarSmearPlaneProcess_getPlane(self)
ChgcarSmearPlaneProcess_swigregister = _cp4vasp.ChgcarSmearPlaneProcess_swigregister
ChgcarSmearPlaneProcess_swigregister(ChgcarSmearPlaneProcess)

class STMSearchProcess(Process):
    __swig_setmethods__ = {}
    for _s in [Process]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, STMSearchProcess, name, value)
    __swig_getmethods__ = {}
    for _s in [Process]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, STMSearchProcess, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _cp4vasp.STMSearchProcess_mode_set
    __swig_getmethods__["mode"] = _cp4vasp.STMSearchProcess_mode_get
    if _newclass:mode = _swig_property(_cp4vasp.STMSearchProcess_mode_get, _cp4vasp.STMSearchProcess_mode_set)
    __swig_setmethods__["pstep"] = _cp4vasp.STMSearchProcess_pstep_set
    __swig_getmethods__["pstep"] = _cp4vasp.STMSearchProcess_pstep_get
    if _newclass:pstep = _swig_property(_cp4vasp.STMSearchProcess_pstep_get, _cp4vasp.STMSearchProcess_pstep_set)
    __swig_setmethods__["delta"] = _cp4vasp.STMSearchProcess_delta_set
    __swig_getmethods__["delta"] = _cp4vasp.STMSearchProcess_delta_get
    if _newclass:delta = _swig_property(_cp4vasp.STMSearchProcess_delta_get, _cp4vasp.STMSearchProcess_delta_set)
    __swig_setmethods__["n0"] = _cp4vasp.STMSearchProcess_n0_set
    __swig_getmethods__["n0"] = _cp4vasp.STMSearchProcess_n0_get
    if _newclass:n0 = _swig_property(_cp4vasp.STMSearchProcess_n0_get, _cp4vasp.STMSearchProcess_n0_set)
    __swig_setmethods__["autoplane"] = _cp4vasp.STMSearchProcess_autoplane_set
    __swig_getmethods__["autoplane"] = _cp4vasp.STMSearchProcess_autoplane_get
    if _newclass:autoplane = _swig_property(_cp4vasp.STMSearchProcess_autoplane_get, _cp4vasp.STMSearchProcess_autoplane_set)
    __swig_setmethods__["value"] = _cp4vasp.STMSearchProcess_value_set
    __swig_getmethods__["value"] = _cp4vasp.STMSearchProcess_value_get
    if _newclass:value = _swig_property(_cp4vasp.STMSearchProcess_value_get, _cp4vasp.STMSearchProcess_value_set)
    def __init__(self, *args): 
        this = _cp4vasp.new_STMSearchProcess(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(self): return _cp4vasp.STMSearchProcess_update(self)
    def getDir(self): return _cp4vasp.STMSearchProcess_getDir(self)
    def setDir(self, *args): return _cp4vasp.STMSearchProcess_setDir(self, *args)
    def setChgcar(self, *args): return _cp4vasp.STMSearchProcess_setChgcar(self, *args)
    def setSmear(self, *args): return _cp4vasp.STMSearchProcess_setSmear(self, *args)
    def searchFast(self, *args): return _cp4vasp.STMSearchProcess_searchFast(self, *args)
    def searchSlow(self, *args): return _cp4vasp.STMSearchProcess_searchSlow(self, *args)
    def getHeightFast(self, *args): return _cp4vasp.STMSearchProcess_getHeightFast(self, *args)
    def getHeightSlow(self, *args): return _cp4vasp.STMSearchProcess_getHeightSlow(self, *args)
    def getHeightFastCubic(self, *args): return _cp4vasp.STMSearchProcess_getHeightFastCubic(self, *args)
    def getHeightSlowCubic(self, *args): return _cp4vasp.STMSearchProcess_getHeightSlowCubic(self, *args)
    def getClassName(self): return _cp4vasp.STMSearchProcess_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_STMSearchProcess
    __del__ = lambda self : None;
    def next(self): return _cp4vasp.STMSearchProcess_next(self)
    def processAll(self): return _cp4vasp.STMSearchProcess_processAll(self)
    def getPlane(self): return _cp4vasp.STMSearchProcess_getPlane(self)
STMSearchProcess_swigregister = _cp4vasp.STMSearchProcess_swigregister
STMSearchProcess_swigregister(STMSearchProcess)


def VisInit():
  return _cp4vasp.VisInit()
VisInit = _cp4vasp.VisInit

def VisMainLoop():
  return _cp4vasp.VisMainLoop()
VisMainLoop = _cp4vasp.VisMainLoop

def VisMainLoopInThread():
  return _cp4vasp.VisMainLoopInThread()
VisMainLoopInThread = _cp4vasp.VisMainLoopInThread

def VisSync():
  return _cp4vasp.VisSync()
VisSync = _cp4vasp.VisSync

def VisCheck():
  return _cp4vasp.VisCheck()
VisCheck = _cp4vasp.VisCheck

def checkThreadsSupport():
  return _cp4vasp.checkThreadsSupport()
checkThreadsSupport = _cp4vasp.checkThreadsSupport
class VisBackEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisBackEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisBackEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _cp4vasp.VisBackEvent_create
    if _newclass:create = staticmethod(_cp4vasp.VisBackEvent_create)
    __swig_setmethods__["type"] = _cp4vasp.VisBackEvent_type_set
    __swig_getmethods__["type"] = _cp4vasp.VisBackEvent_type_get
    if _newclass:type = _swig_property(_cp4vasp.VisBackEvent_type_get, _cp4vasp.VisBackEvent_type_set)
    __swig_setmethods__["index"] = _cp4vasp.VisBackEvent_index_set
    __swig_getmethods__["index"] = _cp4vasp.VisBackEvent_index_get
    if _newclass:index = _swig_property(_cp4vasp.VisBackEvent_index_get, _cp4vasp.VisBackEvent_index_set)
    __swig_setmethods__["nx"] = _cp4vasp.VisBackEvent_nx_set
    __swig_getmethods__["nx"] = _cp4vasp.VisBackEvent_nx_get
    if _newclass:nx = _swig_property(_cp4vasp.VisBackEvent_nx_get, _cp4vasp.VisBackEvent_nx_set)
    __swig_setmethods__["ny"] = _cp4vasp.VisBackEvent_ny_set
    __swig_getmethods__["ny"] = _cp4vasp.VisBackEvent_ny_get
    if _newclass:ny = _swig_property(_cp4vasp.VisBackEvent_ny_get, _cp4vasp.VisBackEvent_ny_set)
    __swig_setmethods__["nz"] = _cp4vasp.VisBackEvent_nz_set
    __swig_getmethods__["nz"] = _cp4vasp.VisBackEvent_nz_get
    if _newclass:nz = _swig_property(_cp4vasp.VisBackEvent_nz_get, _cp4vasp.VisBackEvent_nz_set)
    def getStructureDrawer(self): return _cp4vasp.VisBackEvent_getStructureDrawer(self)
    def getWindow(self): return _cp4vasp.VisBackEvent_getWindow(self)
    __swig_destroy__ = _cp4vasp.delete_VisBackEvent
    __del__ = lambda self : None;
VisBackEvent_swigregister = _cp4vasp.VisBackEvent_swigregister
VisBackEvent_swigregister(VisBackEvent)
cvar = _cp4vasp.cvar
BE_NONE = cvar.BE_NONE
BE_SELECTED = cvar.BE_SELECTED
BE_DESELECTED = cvar.BE_DESELECTED
BE_WIN_ACTIVATE = cvar.BE_WIN_ACTIVATE
BE_WIN_DEACTIVATE = cvar.BE_WIN_DEACTIVATE
BE_WIN_SHOW = cvar.BE_WIN_SHOW
BE_WIN_HIDE = cvar.BE_WIN_HIDE
BE_WIN_CLOSE = cvar.BE_WIN_CLOSE

def VisBackEvent_create():
  return _cp4vasp.VisBackEvent_create()
VisBackEvent_create = _cp4vasp.VisBackEvent_create

class VisBackEventQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisBackEventQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisBackEventQueue, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get"] = lambda x: _cp4vasp.VisBackEventQueue_get
    if _newclass:get = staticmethod(_cp4vasp.VisBackEventQueue_get)
    def __init__(self): 
        this = _cp4vasp.new_VisBackEventQueue()
        try: self.this.append(this)
        except: self.this = this
    def current(self): return _cp4vasp.VisBackEventQueue_current(self)
    def last(self): return _cp4vasp.VisBackEventQueue_last(self)
    def pop(self): return _cp4vasp.VisBackEventQueue_pop(self)
    def append(self, *args): return _cp4vasp.VisBackEventQueue_append(self, *args)
    def prepend(self, *args): return _cp4vasp.VisBackEventQueue_prepend(self, *args)
    __swig_destroy__ = _cp4vasp.delete_VisBackEventQueue
    __del__ = lambda self : None;
VisBackEventQueue_swigregister = _cp4vasp.VisBackEventQueue_swigregister
VisBackEventQueue_swigregister(VisBackEventQueue)

def VisBackEventQueue_get():
  return _cp4vasp.VisBackEventQueue_get()
VisBackEventQueue_get = _cp4vasp.VisBackEventQueue_get

class VisWindow(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisWindow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mouse_x"] = _cp4vasp.VisWindow_mouse_x_set
    __swig_getmethods__["mouse_x"] = _cp4vasp.VisWindow_mouse_x_get
    if _newclass:mouse_x = _swig_property(_cp4vasp.VisWindow_mouse_x_get, _cp4vasp.VisWindow_mouse_x_set)
    __swig_setmethods__["mouse_y"] = _cp4vasp.VisWindow_mouse_y_set
    __swig_getmethods__["mouse_y"] = _cp4vasp.VisWindow_mouse_y_get
    if _newclass:mouse_y = _swig_property(_cp4vasp.VisWindow_mouse_y_get, _cp4vasp.VisWindow_mouse_y_set)
    __swig_setmethods__["mouse_button1"] = _cp4vasp.VisWindow_mouse_button1_set
    __swig_getmethods__["mouse_button1"] = _cp4vasp.VisWindow_mouse_button1_get
    if _newclass:mouse_button1 = _swig_property(_cp4vasp.VisWindow_mouse_button1_get, _cp4vasp.VisWindow_mouse_button1_set)
    __swig_setmethods__["mouse_button2"] = _cp4vasp.VisWindow_mouse_button2_set
    __swig_getmethods__["mouse_button2"] = _cp4vasp.VisWindow_mouse_button2_get
    if _newclass:mouse_button2 = _swig_property(_cp4vasp.VisWindow_mouse_button2_get, _cp4vasp.VisWindow_mouse_button2_set)
    __swig_setmethods__["mouse_button3"] = _cp4vasp.VisWindow_mouse_button3_set
    __swig_getmethods__["mouse_button3"] = _cp4vasp.VisWindow_mouse_button3_get
    if _newclass:mouse_button3 = _swig_property(_cp4vasp.VisWindow_mouse_button3_get, _cp4vasp.VisWindow_mouse_button3_set)
    __swig_setmethods__["mouse_button"] = _cp4vasp.VisWindow_mouse_button_set
    __swig_getmethods__["mouse_button"] = _cp4vasp.VisWindow_mouse_button_get
    if _newclass:mouse_button = _swig_property(_cp4vasp.VisWindow_mouse_button_get, _cp4vasp.VisWindow_mouse_button_set)
    __swig_setmethods__["key"] = _cp4vasp.VisWindow_key_set
    __swig_getmethods__["key"] = _cp4vasp.VisWindow_key_get
    if _newclass:key = _swig_property(_cp4vasp.VisWindow_key_get, _cp4vasp.VisWindow_key_set)
    def getClassName(self): return _cp4vasp.VisWindow_getClassName(self)
    __swig_getmethods__["x"] = _cp4vasp.VisWindow_x_get
    if _newclass:x = _swig_property(_cp4vasp.VisWindow_x_get)
    __swig_getmethods__["y"] = _cp4vasp.VisWindow_y_get
    if _newclass:y = _swig_property(_cp4vasp.VisWindow_y_get)
    __swig_getmethods__["w"] = _cp4vasp.VisWindow_w_get
    if _newclass:w = _swig_property(_cp4vasp.VisWindow_w_get)
    __swig_getmethods__["h"] = _cp4vasp.VisWindow_h_get
    if _newclass:h = _swig_property(_cp4vasp.VisWindow_h_get)
    def __init__(self, *args): 
        this = _cp4vasp.new_VisWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_VisWindow
    __del__ = lambda self : None;
    __swig_getmethods__["getFirstWindow"] = lambda x: _cp4vasp.VisWindow_getFirstWindow
    if _newclass:getFirstWindow = staticmethod(_cp4vasp.VisWindow_getFirstWindow)
    __swig_getmethods__["getLastWindow"] = lambda x: _cp4vasp.VisWindow_getLastWindow
    if _newclass:getLastWindow = staticmethod(_cp4vasp.VisWindow_getLastWindow)
    __swig_getmethods__["getWindow"] = lambda x: _cp4vasp.VisWindow_getWindow
    if _newclass:getWindow = staticmethod(_cp4vasp.VisWindow_getWindow)
    __swig_getmethods__["getWindowByOutput"] = lambda x: _cp4vasp.VisWindow_getWindowByOutput
    if _newclass:getWindowByOutput = staticmethod(_cp4vasp.VisWindow_getWindowByOutput)
    __swig_getmethods__["windowsCount"] = lambda x: _cp4vasp.VisWindow_windowsCount
    if _newclass:windowsCount = staticmethod(_cp4vasp.VisWindow_windowsCount)
    __swig_getmethods__["getWindowIndex"] = lambda x: _cp4vasp.VisWindow_getWindowIndex
    if _newclass:getWindowIndex = staticmethod(_cp4vasp.VisWindow_getWindowIndex)
    __swig_getmethods__["deleteAllWindows"] = lambda x: _cp4vasp.VisWindow_deleteAllWindows
    if _newclass:deleteAllWindows = staticmethod(_cp4vasp.VisWindow_deleteAllWindows)
    def getNextWindow(self): return _cp4vasp.VisWindow_getNextWindow(self)
    def getPreviousWindow(self): return _cp4vasp.VisWindow_getPreviousWindow(self)
    __swig_getmethods__["deleteWindow"] = lambda x: _cp4vasp.VisWindow_deleteWindow
    if _newclass:deleteWindow = staticmethod(_cp4vasp.VisWindow_deleteWindow)
    def getTitle(self): return _cp4vasp.VisWindow_getTitle(self)
    def setTitle(self, *args): return _cp4vasp.VisWindow_setTitle(self, *args)
    def position(self, *args): return _cp4vasp.VisWindow_position(self, *args)
    def size(self, *args): return _cp4vasp.VisWindow_size(self, *args)
    def resize(self, *args): return _cp4vasp.VisWindow_resize(self, *args)
    def show(self): return _cp4vasp.VisWindow_show(self)
    def hide(self): return _cp4vasp.VisWindow_hide(self)
    def redraw(self): return _cp4vasp.VisWindow_redraw(self)
    def setDrawer(self, *args): return _cp4vasp.VisWindow_setDrawer(self, *args)
    def getDrawer(self): return _cp4vasp.VisWindow_getDrawer(self)
    def saveScreenshot(self, *args): return _cp4vasp.VisWindow_saveScreenshot(self, *args)
VisWindow_swigregister = _cp4vasp.VisWindow_swigregister
VisWindow_swigregister(VisWindow)

def VisWindow_getFirstWindow():
  return _cp4vasp.VisWindow_getFirstWindow()
VisWindow_getFirstWindow = _cp4vasp.VisWindow_getFirstWindow

def VisWindow_getLastWindow():
  return _cp4vasp.VisWindow_getLastWindow()
VisWindow_getLastWindow = _cp4vasp.VisWindow_getLastWindow

def VisWindow_getWindow(*args):
  return _cp4vasp.VisWindow_getWindow(*args)
VisWindow_getWindow = _cp4vasp.VisWindow_getWindow

def VisWindow_getWindowByOutput(*args):
  return _cp4vasp.VisWindow_getWindowByOutput(*args)
VisWindow_getWindowByOutput = _cp4vasp.VisWindow_getWindowByOutput

def VisWindow_windowsCount():
  return _cp4vasp.VisWindow_windowsCount()
VisWindow_windowsCount = _cp4vasp.VisWindow_windowsCount

def VisWindow_getWindowIndex(*args):
  return _cp4vasp.VisWindow_getWindowIndex(*args)
VisWindow_getWindowIndex = _cp4vasp.VisWindow_getWindowIndex

def VisWindow_deleteAllWindows():
  return _cp4vasp.VisWindow_deleteAllWindows()
VisWindow_deleteAllWindows = _cp4vasp.VisWindow_deleteAllWindows

def VisWindow_deleteWindow(*args):
  return _cp4vasp.VisWindow_deleteWindow(*args)
VisWindow_deleteWindow = _cp4vasp.VisWindow_deleteWindow

class VisDrawer(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisDrawer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_VisDrawer()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.VisDrawer_getClassName(self)
    def getWindow(self): return _cp4vasp.VisDrawer_getWindow(self)
    def getPrevious(self): return _cp4vasp.VisDrawer_getPrevious(self)
    def getNext(self): return _cp4vasp.VisDrawer_getNext(self)
    def getFirst(self): return _cp4vasp.VisDrawer_getFirst(self)
    def getLast(self): return _cp4vasp.VisDrawer_getLast(self)
    def countBefore(self): return _cp4vasp.VisDrawer_countBefore(self)
    def countAfter(self): return _cp4vasp.VisDrawer_countAfter(self)
    def count(self): return _cp4vasp.VisDrawer_count(self)
    def insertAfter(self, *args): return _cp4vasp.VisDrawer_insertAfter(self, *args)
    def insertBefore(self, *args): return _cp4vasp.VisDrawer_insertBefore(self, *args)
    def insertSequenceAfter(self, *args): return _cp4vasp.VisDrawer_insertSequenceAfter(self, *args)
    def insertSequenceBefore(self, *args): return _cp4vasp.VisDrawer_insertSequenceBefore(self, *args)
    def append(self, *args): return _cp4vasp.VisDrawer_append(self, *args)
    def appendSequence(self, *args): return _cp4vasp.VisDrawer_appendSequence(self, *args)
    __swig_destroy__ = _cp4vasp.delete_VisDrawer
    __del__ = lambda self : None;
    def getMouseX(self): return _cp4vasp.VisDrawer_getMouseX(self)
    def getMouseY(self): return _cp4vasp.VisDrawer_getMouseY(self)
    def getMouseButton(self): return _cp4vasp.VisDrawer_getMouseButton(self)
    def getMouseButton1(self): return _cp4vasp.VisDrawer_getMouseButton1(self)
    def getMouseButton2(self): return _cp4vasp.VisDrawer_getMouseButton2(self)
    def getMouseButton3(self): return _cp4vasp.VisDrawer_getMouseButton3(self)
    def getKey(self): return _cp4vasp.VisDrawer_getKey(self)
    def getWidth(self): return _cp4vasp.VisDrawer_getWidth(self)
    def getHeight(self): return _cp4vasp.VisDrawer_getHeight(self)
    def redraw(self): return _cp4vasp.VisDrawer_redraw(self)
VisDrawer_swigregister = _cp4vasp.VisDrawer_swigregister
VisDrawer_swigregister(VisDrawer)

class VisNavDrawer(VisDrawer):
    __swig_setmethods__ = {}
    for _s in [VisDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisNavDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisNavDrawer, name)
    __repr__ = _swig_repr
    __swig_getmethods__["bg_red"] = _cp4vasp.VisNavDrawer_bg_red_get
    if _newclass:bg_red = _swig_property(_cp4vasp.VisNavDrawer_bg_red_get)
    __swig_getmethods__["bg_green"] = _cp4vasp.VisNavDrawer_bg_green_get
    if _newclass:bg_green = _swig_property(_cp4vasp.VisNavDrawer_bg_green_get)
    __swig_getmethods__["bg_blue"] = _cp4vasp.VisNavDrawer_bg_blue_get
    if _newclass:bg_blue = _swig_property(_cp4vasp.VisNavDrawer_bg_blue_get)
    def __init__(self): 
        this = _cp4vasp.new_VisNavDrawer()
        try: self.this.append(this)
        except: self.this = this
    def getRotMatElement(self, *args): return _cp4vasp.VisNavDrawer_getRotMatElement(self, *args)
    def setBackground(self, *args): return _cp4vasp.VisNavDrawer_setBackground(self, *args)
    def setAntialiasing(self, *args): return _cp4vasp.VisNavDrawer_setAntialiasing(self, *args)
    def getAntialiasing(self): return _cp4vasp.VisNavDrawer_getAntialiasing(self)
    def getClassName(self): return _cp4vasp.VisNavDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisNavDrawer
    __del__ = lambda self : None;
    def setHome(self): return _cp4vasp.VisNavDrawer_setHome(self)
    def setFrontView(self): return _cp4vasp.VisNavDrawer_setFrontView(self)
    def setBackView(self): return _cp4vasp.VisNavDrawer_setBackView(self)
    def setLeftView(self): return _cp4vasp.VisNavDrawer_setLeftView(self)
    def setRightView(self): return _cp4vasp.VisNavDrawer_setRightView(self)
    def setTopView(self): return _cp4vasp.VisNavDrawer_setTopView(self)
    def setBottomView(self): return _cp4vasp.VisNavDrawer_setBottomView(self)
    def getPerspective(self): return _cp4vasp.VisNavDrawer_getPerspective(self)
    def setPerspective(self, *args): return _cp4vasp.VisNavDrawer_setPerspective(self, *args)
    def getZoom(self): return _cp4vasp.VisNavDrawer_getZoom(self)
    def setZoom(self, *args): return _cp4vasp.VisNavDrawer_setZoom(self, *args)
    def mulZoom(self, *args): return _cp4vasp.VisNavDrawer_mulZoom(self, *args)
VisNavDrawer_swigregister = _cp4vasp.VisNavDrawer_swigregister
VisNavDrawer_swigregister(VisNavDrawer)


def getDefaultPrimitivesResolution():
  return _cp4vasp.getDefaultPrimitivesResolution()
getDefaultPrimitivesResolution = _cp4vasp.getDefaultPrimitivesResolution

def setDefaultPrimitivesResolution(*args):
  return _cp4vasp.setDefaultPrimitivesResolution(*args)
setDefaultPrimitivesResolution = _cp4vasp.setDefaultPrimitivesResolution
class VisPrimitiveDrawer(VisDrawer):
    __swig_setmethods__ = {}
    for _s in [VisDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisPrimitiveDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisPrimitiveDrawer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arrow_radius"] = _cp4vasp.VisPrimitiveDrawer_arrow_radius_set
    __swig_getmethods__["arrow_radius"] = _cp4vasp.VisPrimitiveDrawer_arrow_radius_get
    if _newclass:arrow_radius = _swig_property(_cp4vasp.VisPrimitiveDrawer_arrow_radius_get, _cp4vasp.VisPrimitiveDrawer_arrow_radius_set)
    __swig_setmethods__["arrowhead_radius"] = _cp4vasp.VisPrimitiveDrawer_arrowhead_radius_set
    __swig_getmethods__["arrowhead_radius"] = _cp4vasp.VisPrimitiveDrawer_arrowhead_radius_get
    if _newclass:arrowhead_radius = _swig_property(_cp4vasp.VisPrimitiveDrawer_arrowhead_radius_get, _cp4vasp.VisPrimitiveDrawer_arrowhead_radius_set)
    __swig_setmethods__["arrowhead_length"] = _cp4vasp.VisPrimitiveDrawer_arrowhead_length_set
    __swig_getmethods__["arrowhead_length"] = _cp4vasp.VisPrimitiveDrawer_arrowhead_length_get
    if _newclass:arrowhead_length = _swig_property(_cp4vasp.VisPrimitiveDrawer_arrowhead_length_get, _cp4vasp.VisPrimitiveDrawer_arrowhead_length_set)
    def __init__(self): 
        this = _cp4vasp.new_VisPrimitiveDrawer()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.VisPrimitiveDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisPrimitiveDrawer
    __del__ = lambda self : None;
    def setPrimitivesResolution(self, *args): return _cp4vasp.VisPrimitiveDrawer_setPrimitivesResolution(self, *args)
    def color(self, *args): return _cp4vasp.VisPrimitiveDrawer_color(self, *args)
    def sphere(self, *args): return _cp4vasp.VisPrimitiveDrawer_sphere(self, *args)
    def cylinder(self, *args): return _cp4vasp.VisPrimitiveDrawer_cylinder(self, *args)
    def cone(self, *args): return _cp4vasp.VisPrimitiveDrawer_cone(self, *args)
    def line(self, *args): return _cp4vasp.VisPrimitiveDrawer_line(self, *args)
    def arrow(self, *args): return _cp4vasp.VisPrimitiveDrawer_arrow(self, *args)
VisPrimitiveDrawer_swigregister = _cp4vasp.VisPrimitiveDrawer_swigregister
VisPrimitiveDrawer_swigregister(VisPrimitiveDrawer)

class AtomId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomId, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_AtomId()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["atom"] = _cp4vasp.AtomId_atom_set
    __swig_getmethods__["atom"] = _cp4vasp.AtomId_atom_get
    if _newclass:atom = _swig_property(_cp4vasp.AtomId_atom_get, _cp4vasp.AtomId_atom_set)
    __swig_setmethods__["nx"] = _cp4vasp.AtomId_nx_set
    __swig_getmethods__["nx"] = _cp4vasp.AtomId_nx_get
    if _newclass:nx = _swig_property(_cp4vasp.AtomId_nx_get, _cp4vasp.AtomId_nx_set)
    __swig_setmethods__["ny"] = _cp4vasp.AtomId_ny_set
    __swig_getmethods__["ny"] = _cp4vasp.AtomId_ny_get
    if _newclass:ny = _swig_property(_cp4vasp.AtomId_ny_get, _cp4vasp.AtomId_ny_set)
    __swig_setmethods__["nz"] = _cp4vasp.AtomId_nz_set
    __swig_getmethods__["nz"] = _cp4vasp.AtomId_nz_get
    if _newclass:nz = _swig_property(_cp4vasp.AtomId_nz_get, _cp4vasp.AtomId_nz_set)
    __swig_destroy__ = _cp4vasp.delete_AtomId
    __del__ = lambda self : None;
AtomId_swigregister = _cp4vasp.AtomId_swigregister
AtomId_swigregister(AtomId)

class VisStructureDrawer(VisPrimitiveDrawer):
    __swig_setmethods__ = {}
    for _s in [VisPrimitiveDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisStructureDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisPrimitiveDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisStructureDrawer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cell_red"] = _cp4vasp.VisStructureDrawer_cell_red_set
    __swig_getmethods__["cell_red"] = _cp4vasp.VisStructureDrawer_cell_red_get
    if _newclass:cell_red = _swig_property(_cp4vasp.VisStructureDrawer_cell_red_get, _cp4vasp.VisStructureDrawer_cell_red_set)
    __swig_setmethods__["cell_green"] = _cp4vasp.VisStructureDrawer_cell_green_set
    __swig_getmethods__["cell_green"] = _cp4vasp.VisStructureDrawer_cell_green_get
    if _newclass:cell_green = _swig_property(_cp4vasp.VisStructureDrawer_cell_green_get, _cp4vasp.VisStructureDrawer_cell_green_set)
    __swig_setmethods__["cell_blue"] = _cp4vasp.VisStructureDrawer_cell_blue_set
    __swig_getmethods__["cell_blue"] = _cp4vasp.VisStructureDrawer_cell_blue_get
    if _newclass:cell_blue = _swig_property(_cp4vasp.VisStructureDrawer_cell_blue_get, _cp4vasp.VisStructureDrawer_cell_blue_set)
    __swig_setmethods__["bond_red"] = _cp4vasp.VisStructureDrawer_bond_red_set
    __swig_getmethods__["bond_red"] = _cp4vasp.VisStructureDrawer_bond_red_get
    if _newclass:bond_red = _swig_property(_cp4vasp.VisStructureDrawer_bond_red_get, _cp4vasp.VisStructureDrawer_bond_red_set)
    __swig_setmethods__["bond_green"] = _cp4vasp.VisStructureDrawer_bond_green_set
    __swig_getmethods__["bond_green"] = _cp4vasp.VisStructureDrawer_bond_green_get
    if _newclass:bond_green = _swig_property(_cp4vasp.VisStructureDrawer_bond_green_get, _cp4vasp.VisStructureDrawer_bond_green_set)
    __swig_setmethods__["bond_blue"] = _cp4vasp.VisStructureDrawer_bond_blue_set
    __swig_getmethods__["bond_blue"] = _cp4vasp.VisStructureDrawer_bond_blue_get
    if _newclass:bond_blue = _swig_property(_cp4vasp.VisStructureDrawer_bond_blue_get, _cp4vasp.VisStructureDrawer_bond_blue_set)
    __swig_getmethods__["info"] = _cp4vasp.VisStructureDrawer_info_get
    if _newclass:info = _swig_property(_cp4vasp.VisStructureDrawer_info_get)
    __swig_getmethods__["cell_line_width"] = _cp4vasp.VisStructureDrawer_cell_line_width_get
    if _newclass:cell_line_width = _swig_property(_cp4vasp.VisStructureDrawer_cell_line_width_get)
    __swig_getmethods__["showcellflag"] = _cp4vasp.VisStructureDrawer_showcellflag_get
    if _newclass:showcellflag = _swig_property(_cp4vasp.VisStructureDrawer_showcellflag_get)
    def updateStructure(self): return _cp4vasp.VisStructureDrawer_updateStructure(self)
    def setMultiple(self, *args): return _cp4vasp.VisStructureDrawer_setMultiple(self, *args)
    def setMultiple1(self, *args): return _cp4vasp.VisStructureDrawer_setMultiple1(self, *args)
    def setMultiple2(self, *args): return _cp4vasp.VisStructureDrawer_setMultiple2(self, *args)
    def setMultiple3(self, *args): return _cp4vasp.VisStructureDrawer_setMultiple3(self, *args)
    def getMultiple1(self): return _cp4vasp.VisStructureDrawer_getMultiple1(self)
    def getMultiple2(self): return _cp4vasp.VisStructureDrawer_getMultiple2(self)
    def getMultiple3(self): return _cp4vasp.VisStructureDrawer_getMultiple3(self)
    def __init__(self): 
        this = _cp4vasp.new_VisStructureDrawer()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.VisStructureDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisStructureDrawer
    __del__ = lambda self : None;
    def switchSelectionByPick(self, *args): return _cp4vasp.VisStructureDrawer_switchSelectionByPick(self, *args)
    def setPrimitivesResolution(self, *args): return _cp4vasp.VisStructureDrawer_setPrimitivesResolution(self, *args)
    def selectObject(self, *args): return _cp4vasp.VisStructureDrawer_selectObject(self, *args)
    def fillInfo(self): return _cp4vasp.VisStructureDrawer_fillInfo(self)
    def setStructure(self, *args): return _cp4vasp.VisStructureDrawer_setStructure(self, *args)
    def getStructure(self): return _cp4vasp.VisStructureDrawer_getStructure(self)
    def getRadiusFactor(self): return _cp4vasp.VisStructureDrawer_getRadiusFactor(self)
    def setRadiusFactor(self, *args): return _cp4vasp.VisStructureDrawer_setRadiusFactor(self, *args)
    def getBondRadius(self): return _cp4vasp.VisStructureDrawer_getBondRadius(self)
    def setBondRadius(self, *args): return _cp4vasp.VisStructureDrawer_setBondRadius(self, *args)
    def getBondFactor(self): return _cp4vasp.VisStructureDrawer_getBondFactor(self)
    def setBondFactor(self, *args): return _cp4vasp.VisStructureDrawer_setBondFactor(self, *args)
    def showCell(self, f=1): return _cp4vasp.VisStructureDrawer_showCell(self, f)
    def getCellLineWidth(self): return _cp4vasp.VisStructureDrawer_getCellLineWidth(self)
    def setCellLineWidth(self, *args): return _cp4vasp.VisStructureDrawer_setCellLineWidth(self, *args)
    def setCellColor(self, *args): return _cp4vasp.VisStructureDrawer_setCellColor(self, *args)
    def setBondColor(self, *args): return _cp4vasp.VisStructureDrawer_setBondColor(self, *args)
    def getSelected(self, *args): return _cp4vasp.VisStructureDrawer_getSelected(self, *args)
    def getSelectedCount(self): return _cp4vasp.VisStructureDrawer_getSelectedCount(self)
    def appendSelected(self, *args): return _cp4vasp.VisStructureDrawer_appendSelected(self, *args)
    def notifySelected(self, *args): return _cp4vasp.VisStructureDrawer_notifySelected(self, *args)
    def notifyDeselected(self, *args): return _cp4vasp.VisStructureDrawer_notifyDeselected(self, *args)
    def removeSelectedAll(self): return _cp4vasp.VisStructureDrawer_removeSelectedAll(self)
    def removeSelectedItem(self, *args): return _cp4vasp.VisStructureDrawer_removeSelectedItem(self, *args)
    def findSelectedAtom(self, *args): return _cp4vasp.VisStructureDrawer_findSelectedAtom(self, *args)
    def selectAtom(self, *args): return _cp4vasp.VisStructureDrawer_selectAtom(self, *args)
    def deselectAtom(self, *args): return _cp4vasp.VisStructureDrawer_deselectAtom(self, *args)
    def switchAtomSelection(self, *args): return _cp4vasp.VisStructureDrawer_switchAtomSelection(self, *args)
VisStructureDrawer_swigregister = _cp4vasp.VisStructureDrawer_swigregister
VisStructureDrawer_swigregister(VisStructureDrawer)

class Clamp(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Clamp, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Clamp, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getClassName(self): return _cp4vasp.Clamp_getClassName(self)
    def f(self, *args): return _cp4vasp.Clamp_f(self, *args)
    __swig_destroy__ = _cp4vasp.delete_Clamp
    __del__ = lambda self : None;
Clamp_swigregister = _cp4vasp.Clamp_swigregister
Clamp_swigregister(Clamp)

class ThresholdClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_ThresholdClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ThresholdClamp
    __del__ = lambda self : None;
ThresholdClamp_swigregister = _cp4vasp.ThresholdClamp_swigregister
ThresholdClamp_swigregister(ThresholdClamp)

class SawtoothClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SawtoothClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SawtoothClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_SawtoothClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_SawtoothClamp
    __del__ = lambda self : None;
SawtoothClamp_swigregister = _cp4vasp.SawtoothClamp_swigregister
SawtoothClamp_swigregister(SawtoothClamp)

class CosClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CosClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CosClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_CosClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_CosClamp
    __del__ = lambda self : None;
CosClamp_swigregister = _cp4vasp.CosClamp_swigregister
CosClamp_swigregister(CosClamp)

class WaveClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_WaveClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_WaveClamp
    __del__ = lambda self : None;
WaveClamp_swigregister = _cp4vasp.WaveClamp_swigregister
WaveClamp_swigregister(WaveClamp)

class AtanClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtanClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtanClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_AtanClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_AtanClamp
    __del__ = lambda self : None;
AtanClamp_swigregister = _cp4vasp.AtanClamp_swigregister
AtanClamp_swigregister(AtanClamp)

class FermiClamp(Clamp):
    __swig_setmethods__ = {}
    for _s in [Clamp]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FermiClamp, name, value)
    __swig_getmethods__ = {}
    for _s in [Clamp]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FermiClamp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cp4vasp.new_FermiClamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_FermiClamp
    __del__ = lambda self : None;
FermiClamp_swigregister = _cp4vasp.FermiClamp_swigregister
FermiClamp_swigregister(FermiClamp)

class ColorGradient(ClassInterface):
    __swig_setmethods__ = {}
    for _s in [ClassInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [ClassInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorGradient, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _cp4vasp.ColorGradient_color_set
    __swig_getmethods__["color"] = _cp4vasp.ColorGradient_color_get
    if _newclass:color = _swig_property(_cp4vasp.ColorGradient_color_get, _cp4vasp.ColorGradient_color_set)
    def getClassName(self): return _cp4vasp.ColorGradient_getClassName(self)
    def f(self, *args): return _cp4vasp.ColorGradient_f(self, *args)
    def glcolor(self, *args): return _cp4vasp.ColorGradient_glcolor(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ColorGradient
    __del__ = lambda self : None;
ColorGradient_swigregister = _cp4vasp.ColorGradient_swigregister
ColorGradient_swigregister(ColorGradient)

class GrayColorGradient(ColorGradient):
    __swig_setmethods__ = {}
    for _s in [ColorGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrayColorGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GrayColorGradient, name)
    __repr__ = _swig_repr
    def getClassName(self): return _cp4vasp.GrayColorGradient_getClassName(self)
    def f(self, *args): return _cp4vasp.GrayColorGradient_f(self, *args)
    def __init__(self): 
        this = _cp4vasp.new_GrayColorGradient()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_GrayColorGradient
    __del__ = lambda self : None;
GrayColorGradient_swigregister = _cp4vasp.GrayColorGradient_swigregister
GrayColorGradient_swigregister(GrayColorGradient)

class RainbowColorGradient(ColorGradient):
    __swig_setmethods__ = {}
    for _s in [ColorGradient]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RainbowColorGradient, name, value)
    __swig_getmethods__ = {}
    for _s in [ColorGradient]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RainbowColorGradient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["saturation"] = _cp4vasp.RainbowColorGradient_saturation_set
    __swig_getmethods__["saturation"] = _cp4vasp.RainbowColorGradient_saturation_get
    if _newclass:saturation = _swig_property(_cp4vasp.RainbowColorGradient_saturation_get, _cp4vasp.RainbowColorGradient_saturation_set)
    __swig_setmethods__["value"] = _cp4vasp.RainbowColorGradient_value_set
    __swig_getmethods__["value"] = _cp4vasp.RainbowColorGradient_value_get
    if _newclass:value = _swig_property(_cp4vasp.RainbowColorGradient_value_get, _cp4vasp.RainbowColorGradient_value_set)
    def __init__(self, saturation=1.0, value=1.0): 
        this = _cp4vasp.new_RainbowColorGradient(saturation, value)
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.RainbowColorGradient_getClassName(self)
    def f(self, *args): return _cp4vasp.RainbowColorGradient_f(self, *args)
    __swig_destroy__ = _cp4vasp.delete_RainbowColorGradient
    __del__ = lambda self : None;
RainbowColorGradient_swigregister = _cp4vasp.RainbowColorGradient_swigregister
RainbowColorGradient_swigregister(RainbowColorGradient)

class VisSlideDrawer(VisDrawer):
    __swig_setmethods__ = {}
    for _s in [VisDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisSlideDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisSlideDrawer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n1"] = _cp4vasp.VisSlideDrawer_n1_set
    __swig_getmethods__["n1"] = _cp4vasp.VisSlideDrawer_n1_get
    if _newclass:n1 = _swig_property(_cp4vasp.VisSlideDrawer_n1_get, _cp4vasp.VisSlideDrawer_n1_set)
    __swig_setmethods__["n2"] = _cp4vasp.VisSlideDrawer_n2_set
    __swig_getmethods__["n2"] = _cp4vasp.VisSlideDrawer_n2_get
    if _newclass:n2 = _swig_property(_cp4vasp.VisSlideDrawer_n2_get, _cp4vasp.VisSlideDrawer_n2_set)
    __swig_setmethods__["lo"] = _cp4vasp.VisSlideDrawer_lo_set
    __swig_getmethods__["lo"] = _cp4vasp.VisSlideDrawer_lo_get
    if _newclass:lo = _swig_property(_cp4vasp.VisSlideDrawer_lo_get, _cp4vasp.VisSlideDrawer_lo_set)
    __swig_setmethods__["hi"] = _cp4vasp.VisSlideDrawer_hi_set
    __swig_getmethods__["hi"] = _cp4vasp.VisSlideDrawer_hi_get
    if _newclass:hi = _swig_property(_cp4vasp.VisSlideDrawer_hi_get, _cp4vasp.VisSlideDrawer_hi_set)
    __swig_setmethods__["scale"] = _cp4vasp.VisSlideDrawer_scale_set
    __swig_getmethods__["scale"] = _cp4vasp.VisSlideDrawer_scale_get
    if _newclass:scale = _swig_property(_cp4vasp.VisSlideDrawer_scale_get, _cp4vasp.VisSlideDrawer_scale_set)
    def __init__(self): 
        this = _cp4vasp.new_VisSlideDrawer()
        try: self.this.append(this)
        except: self.this = this
    def setShadow(self, *args): return _cp4vasp.VisSlideDrawer_setShadow(self, *args)
    def getShadow(self): return _cp4vasp.VisSlideDrawer_getShadow(self)
    def setB1(self, *args): return _cp4vasp.VisSlideDrawer_setB1(self, *args)
    def setB2(self, *args): return _cp4vasp.VisSlideDrawer_setB2(self, *args)
    def setOrigin(self, *args): return _cp4vasp.VisSlideDrawer_setOrigin(self, *args)
    def setFArray(self, *args): return _cp4vasp.VisSlideDrawer_setFArray(self, *args)
    def setGradient(self, *args): return _cp4vasp.VisSlideDrawer_setGradient(self, *args)
    def setClamp(self, *args): return _cp4vasp.VisSlideDrawer_setClamp(self, *args)
    def assureClampAndGradient(self): return _cp4vasp.VisSlideDrawer_assureClampAndGradient(self)
    __swig_destroy__ = _cp4vasp.delete_VisSlideDrawer
    __del__ = lambda self : None;
VisSlideDrawer_swigregister = _cp4vasp.VisSlideDrawer_swigregister
VisSlideDrawer_swigregister(VisSlideDrawer)

class VisStructureArrowsDrawer(VisDrawer):
    __swig_setmethods__ = {}
    for _s in [VisDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisStructureArrowsDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisStructureArrowsDrawer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arrow_radius"] = _cp4vasp.VisStructureArrowsDrawer_arrow_radius_set
    __swig_getmethods__["arrow_radius"] = _cp4vasp.VisStructureArrowsDrawer_arrow_radius_get
    if _newclass:arrow_radius = _swig_property(_cp4vasp.VisStructureArrowsDrawer_arrow_radius_get, _cp4vasp.VisStructureArrowsDrawer_arrow_radius_set)
    __swig_setmethods__["arrowhead_radius"] = _cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_set
    __swig_getmethods__["arrowhead_radius"] = _cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_get
    if _newclass:arrowhead_radius = _swig_property(_cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_get, _cp4vasp.VisStructureArrowsDrawer_arrowhead_radius_set)
    __swig_setmethods__["arrowhead_length"] = _cp4vasp.VisStructureArrowsDrawer_arrowhead_length_set
    __swig_getmethods__["arrowhead_length"] = _cp4vasp.VisStructureArrowsDrawer_arrowhead_length_get
    if _newclass:arrowhead_length = _swig_property(_cp4vasp.VisStructureArrowsDrawer_arrowhead_length_get, _cp4vasp.VisStructureArrowsDrawer_arrowhead_length_set)
    __swig_setmethods__["red"] = _cp4vasp.VisStructureArrowsDrawer_red_set
    __swig_getmethods__["red"] = _cp4vasp.VisStructureArrowsDrawer_red_get
    if _newclass:red = _swig_property(_cp4vasp.VisStructureArrowsDrawer_red_get, _cp4vasp.VisStructureArrowsDrawer_red_set)
    __swig_setmethods__["green"] = _cp4vasp.VisStructureArrowsDrawer_green_set
    __swig_getmethods__["green"] = _cp4vasp.VisStructureArrowsDrawer_green_get
    if _newclass:green = _swig_property(_cp4vasp.VisStructureArrowsDrawer_green_get, _cp4vasp.VisStructureArrowsDrawer_green_set)
    __swig_setmethods__["blue"] = _cp4vasp.VisStructureArrowsDrawer_blue_set
    __swig_getmethods__["blue"] = _cp4vasp.VisStructureArrowsDrawer_blue_get
    if _newclass:blue = _swig_property(_cp4vasp.VisStructureArrowsDrawer_blue_get, _cp4vasp.VisStructureArrowsDrawer_blue_set)
    __swig_setmethods__["arrows_scale"] = _cp4vasp.VisStructureArrowsDrawer_arrows_scale_set
    __swig_getmethods__["arrows_scale"] = _cp4vasp.VisStructureArrowsDrawer_arrows_scale_get
    if _newclass:arrows_scale = _swig_property(_cp4vasp.VisStructureArrowsDrawer_arrows_scale_get, _cp4vasp.VisStructureArrowsDrawer_arrows_scale_set)
    def __init__(self, *args): 
        this = _cp4vasp.new_VisStructureArrowsDrawer(*args)
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.VisStructureArrowsDrawer_getClassName(self)
    __swig_destroy__ = _cp4vasp.delete_VisStructureArrowsDrawer
    __del__ = lambda self : None;
    def updateStructure(self): return _cp4vasp.VisStructureArrowsDrawer_updateStructure(self)
    def len(self): return _cp4vasp.VisStructureArrowsDrawer_len(self)
    def getArrow(self, *args): return _cp4vasp.VisStructureArrowsDrawer_getArrow(self, *args)
    def setArrow(self, *args): return _cp4vasp.VisStructureArrowsDrawer_setArrow(self, *args)
    def setScale(self, *args): return _cp4vasp.VisStructureArrowsDrawer_setScale(self, *args)
    def getScale(self): return _cp4vasp.VisStructureArrowsDrawer_getScale(self)
VisStructureArrowsDrawer_swigregister = _cp4vasp.VisStructureArrowsDrawer_swigregister
VisStructureArrowsDrawer_swigregister(VisStructureArrowsDrawer)

class VisIsosurfaceDrawer(VisDrawer):
    __swig_setmethods__ = {}
    for _s in [VisDrawer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisIsosurfaceDrawer, name, value)
    __swig_getmethods__ = {}
    for _s in [VisDrawer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VisIsosurfaceDrawer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["list"] = _cp4vasp.VisIsosurfaceDrawer_list_set
    __swig_getmethods__["list"] = _cp4vasp.VisIsosurfaceDrawer_list_get
    if _newclass:list = _swig_property(_cp4vasp.VisIsosurfaceDrawer_list_get, _cp4vasp.VisIsosurfaceDrawer_list_set)
    __swig_setmethods__["list_update_required"] = _cp4vasp.VisIsosurfaceDrawer_list_update_required_set
    __swig_getmethods__["list_update_required"] = _cp4vasp.VisIsosurfaceDrawer_list_update_required_get
    if _newclass:list_update_required = _swig_property(_cp4vasp.VisIsosurfaceDrawer_list_update_required_get, _cp4vasp.VisIsosurfaceDrawer_list_update_required_set)
    __swig_setmethods__["level"] = _cp4vasp.VisIsosurfaceDrawer_level_set
    __swig_getmethods__["level"] = _cp4vasp.VisIsosurfaceDrawer_level_get
    if _newclass:level = _swig_property(_cp4vasp.VisIsosurfaceDrawer_level_get, _cp4vasp.VisIsosurfaceDrawer_level_set)
    __swig_setmethods__["draw_as_points"] = _cp4vasp.VisIsosurfaceDrawer_draw_as_points_set
    __swig_getmethods__["draw_as_points"] = _cp4vasp.VisIsosurfaceDrawer_draw_as_points_get
    if _newclass:draw_as_points = _swig_property(_cp4vasp.VisIsosurfaceDrawer_draw_as_points_get, _cp4vasp.VisIsosurfaceDrawer_draw_as_points_set)
    __swig_setmethods__["mx"] = _cp4vasp.VisIsosurfaceDrawer_mx_set
    __swig_getmethods__["mx"] = _cp4vasp.VisIsosurfaceDrawer_mx_get
    if _newclass:mx = _swig_property(_cp4vasp.VisIsosurfaceDrawer_mx_get, _cp4vasp.VisIsosurfaceDrawer_mx_set)
    __swig_setmethods__["my"] = _cp4vasp.VisIsosurfaceDrawer_my_set
    __swig_getmethods__["my"] = _cp4vasp.VisIsosurfaceDrawer_my_get
    if _newclass:my = _swig_property(_cp4vasp.VisIsosurfaceDrawer_my_get, _cp4vasp.VisIsosurfaceDrawer_my_set)
    __swig_setmethods__["mz"] = _cp4vasp.VisIsosurfaceDrawer_mz_set
    __swig_getmethods__["mz"] = _cp4vasp.VisIsosurfaceDrawer_mz_get
    if _newclass:mz = _swig_property(_cp4vasp.VisIsosurfaceDrawer_mz_get, _cp4vasp.VisIsosurfaceDrawer_mz_set)
    __swig_setmethods__["chgcar"] = _cp4vasp.VisIsosurfaceDrawer_chgcar_set
    __swig_getmethods__["chgcar"] = _cp4vasp.VisIsosurfaceDrawer_chgcar_get
    if _newclass:chgcar = _swig_property(_cp4vasp.VisIsosurfaceDrawer_chgcar_get, _cp4vasp.VisIsosurfaceDrawer_chgcar_set)
    def paint_isosurface(self, *args): return _cp4vasp.VisIsosurfaceDrawer_paint_isosurface(self, *args)
    def handle_tetrahedron(self, *args): return _cp4vasp.VisIsosurfaceDrawer_handle_tetrahedron(self, *args)
    def handle_type1(self, *args): return _cp4vasp.VisIsosurfaceDrawer_handle_type1(self, *args)
    def handle_type2(self, *args): return _cp4vasp.VisIsosurfaceDrawer_handle_type2(self, *args)
    __swig_setmethods__["red"] = _cp4vasp.VisIsosurfaceDrawer_red_set
    __swig_getmethods__["red"] = _cp4vasp.VisIsosurfaceDrawer_red_get
    if _newclass:red = _swig_property(_cp4vasp.VisIsosurfaceDrawer_red_get, _cp4vasp.VisIsosurfaceDrawer_red_set)
    __swig_setmethods__["green"] = _cp4vasp.VisIsosurfaceDrawer_green_set
    __swig_getmethods__["green"] = _cp4vasp.VisIsosurfaceDrawer_green_get
    if _newclass:green = _swig_property(_cp4vasp.VisIsosurfaceDrawer_green_get, _cp4vasp.VisIsosurfaceDrawer_green_set)
    __swig_setmethods__["blue"] = _cp4vasp.VisIsosurfaceDrawer_blue_set
    __swig_getmethods__["blue"] = _cp4vasp.VisIsosurfaceDrawer_blue_get
    if _newclass:blue = _swig_property(_cp4vasp.VisIsosurfaceDrawer_blue_get, _cp4vasp.VisIsosurfaceDrawer_blue_set)
    def __init__(self): 
        this = _cp4vasp.new_VisIsosurfaceDrawer()
        try: self.this.append(this)
        except: self.this = this
    def getClassName(self): return _cp4vasp.VisIsosurfaceDrawer_getClassName(self)
    def setMultiple(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setMultiple(self, *args)
    def setMultiple1(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setMultiple1(self, *args)
    def setMultiple2(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setMultiple2(self, *args)
    def setMultiple3(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setMultiple3(self, *args)
    def getMultiple1(self): return _cp4vasp.VisIsosurfaceDrawer_getMultiple1(self)
    def getMultiple2(self): return _cp4vasp.VisIsosurfaceDrawer_getMultiple2(self)
    def getMultiple3(self): return _cp4vasp.VisIsosurfaceDrawer_getMultiple3(self)
    def updateIsosurface(self): return _cp4vasp.VisIsosurfaceDrawer_updateIsosurface(self)
    def setLevel(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setLevel(self, *args)
    def setChgcar(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setChgcar(self, *args)
    def getLevel(self): return _cp4vasp.VisIsosurfaceDrawer_getLevel(self)
    def getDrawAsPoints(self): return _cp4vasp.VisIsosurfaceDrawer_getDrawAsPoints(self)
    def setDrawAsPoints(self, *args): return _cp4vasp.VisIsosurfaceDrawer_setDrawAsPoints(self, *args)
    __swig_destroy__ = _cp4vasp.delete_VisIsosurfaceDrawer
    __del__ = lambda self : None;
VisIsosurfaceDrawer_swigregister = _cp4vasp.VisIsosurfaceDrawer_swigregister
VisIsosurfaceDrawer_swigregister(VisIsosurfaceDrawer)


def ODP_parseString(*args):
  return _cp4vasp.ODP_parseString(*args)
ODP_parseString = _cp4vasp.ODP_parseString

def ODP_parseFile(*args):
  return _cp4vasp.ODP_parseFile(*args)
ODP_parseFile = _cp4vasp.ODP_parseFile
class ODPNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doc"] = _cp4vasp.ODPNode_doc_set
    __swig_getmethods__["doc"] = _cp4vasp.ODPNode_doc_get
    if _newclass:doc = _swig_property(_cp4vasp.ODPNode_doc_get, _cp4vasp.ODPNode_doc_set)
    __swig_setmethods__["pos"] = _cp4vasp.ODPNode_pos_set
    __swig_getmethods__["pos"] = _cp4vasp.ODPNode_pos_get
    if _newclass:pos = _swig_property(_cp4vasp.ODPNode_pos_get, _cp4vasp.ODPNode_pos_set)
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPNode(*args)
        try: self.this.append(this)
        except: self.this = this
    ELEMENT_NODE = _cp4vasp.ODPNode_ELEMENT_NODE
    ATTRIBUTE_NODE = _cp4vasp.ODPNode_ATTRIBUTE_NODE
    TEXT_NODE = _cp4vasp.ODPNode_TEXT_NODE
    CDATA_SECTION_NODE = _cp4vasp.ODPNode_CDATA_SECTION_NODE
    ENTITY_REFERENCE_NODE = _cp4vasp.ODPNode_ENTITY_REFERENCE_NODE
    ENTITY_NODE = _cp4vasp.ODPNode_ENTITY_NODE
    PROCESSING_INSTRUCTION_NODE = _cp4vasp.ODPNode_PROCESSING_INSTRUCTION_NODE
    COMMENT_NODE = _cp4vasp.ODPNode_COMMENT_NODE
    DOCUMENT_NODE = _cp4vasp.ODPNode_DOCUMENT_NODE
    DOCUMENT_TYPE_NODE = _cp4vasp.ODPNode_DOCUMENT_TYPE_NODE
    DOCUMENT_FRAGMENT_NODE = _cp4vasp.ODPNode_DOCUMENT_FRAGMENT_NODE
    NOTATION_NODE = _cp4vasp.ODPNode_NOTATION_NODE
    def getNodeName(self): return _cp4vasp.ODPNode_getNodeName(self)
    def getNodeValue(self): return _cp4vasp.ODPNode_getNodeValue(self)
    def setNodeValue(self, *args): return _cp4vasp.ODPNode_setNodeValue(self, *args)
    def getNodeType(self): return _cp4vasp.ODPNode_getNodeType(self)
    def getParentNode(self): return _cp4vasp.ODPNode_getParentNode(self)
    def getChildNodes(self): return _cp4vasp.ODPNode_getChildNodes(self)
    def getFirstChild(self): return _cp4vasp.ODPNode_getFirstChild(self)
    def getLastChild(self): return _cp4vasp.ODPNode_getLastChild(self)
    def getPreviousSibling(self): return _cp4vasp.ODPNode_getPreviousSibling(self)
    def getNextSibling(self): return _cp4vasp.ODPNode_getNextSibling(self)
    def getAttributes(self): return _cp4vasp.ODPNode_getAttributes(self)
    def getOwnerDocument(self): return _cp4vasp.ODPNode_getOwnerDocument(self)
    def hasChildNodes(self): return _cp4vasp.ODPNode_hasChildNodes(self)
    def up(self): return _cp4vasp.ODPNode_up(self)
    def down(self): return _cp4vasp.ODPNode_down(self)
    def next(self): return _cp4vasp.ODPNode_next(self)
    def previous(self): return _cp4vasp.ODPNode_previous(self)
    def poschar(self): return _cp4vasp.ODPNode_poschar(self)
    __swig_destroy__ = _cp4vasp.delete_ODPNode
    __del__ = lambda self : None;
ODPNode_swigregister = _cp4vasp.ODPNode_swigregister
ODPNode_swigregister(ODPNode)

class ODPDOMImplementation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDOMImplementation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDOMImplementation, name)
    __repr__ = _swig_repr
    def hasFeature(self, *args): return _cp4vasp.ODPDOMImplementation_hasFeature(self, *args)
    def __init__(self): 
        this = _cp4vasp.new_ODPDOMImplementation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPDOMImplementation
    __del__ = lambda self : None;
ODPDOMImplementation_swigregister = _cp4vasp.ODPDOMImplementation_swigregister
ODPDOMImplementation_swigregister(ODPDOMImplementation)

class ODPDocument(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDocument, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getDoctype(self): return _cp4vasp.ODPDocument_getDoctype(self)
    def getImplementation(self): return _cp4vasp.ODPDocument_getImplementation(self)
    def getDocumentElement(self): return _cp4vasp.ODPDocument_getDocumentElement(self)
    def createElement(self, *args): return _cp4vasp.ODPDocument_createElement(self, *args)
    def createDocumentFragment(self): return _cp4vasp.ODPDocument_createDocumentFragment(self)
    def createTextNode(self, *args): return _cp4vasp.ODPDocument_createTextNode(self, *args)
    def createComment(self, *args): return _cp4vasp.ODPDocument_createComment(self, *args)
    def createCDATASection(self, *args): return _cp4vasp.ODPDocument_createCDATASection(self, *args)
    def createProcessingInstruction(self, *args): return _cp4vasp.ODPDocument_createProcessingInstruction(self, *args)
    def createAttribute(self, *args): return _cp4vasp.ODPDocument_createAttribute(self, *args)
    def createEntityReference(self, *args): return _cp4vasp.ODPDocument_createEntityReference(self, *args)
    def getElementsByTagName(self, *args): return _cp4vasp.ODPDocument_getElementsByTagName(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ODPDocument
    __del__ = lambda self : None;
ODPDocument_swigregister = _cp4vasp.ODPDocument_swigregister
ODPDocument_swigregister(ODPDocument)

class ODPDocumentParent(ODPDocument):
    __swig_setmethods__ = {}
    for _s in [ODPDocument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPDocumentParent, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPDocument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPDocumentParent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cp4vasp.delete_ODPDocumentParent
    __del__ = lambda self : None;
ODPDocumentParent_swigregister = _cp4vasp.ODPDocumentParent_swigregister
ODPDocumentParent_swigregister(ODPDocumentParent)

class ODPElement(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPElement(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTagName(self): return _cp4vasp.ODPElement_getTagName(self)
    def getAttribute(self, *args): return _cp4vasp.ODPElement_getAttribute(self, *args)
    def setAttribute(self, *args): return _cp4vasp.ODPElement_setAttribute(self, *args)
    def removeAttribute(self, *args): return _cp4vasp.ODPElement_removeAttribute(self, *args)
    def getAttributeNode(self, *args): return _cp4vasp.ODPElement_getAttributeNode(self, *args)
    def setAttributeNode(self, *args): return _cp4vasp.ODPElement_setAttributeNode(self, *args)
    def removeAttributeNode(self, *args): return _cp4vasp.ODPElement_removeAttributeNode(self, *args)
    def getElementsByTagName(self, *args): return _cp4vasp.ODPElement_getElementsByTagName(self, *args)
    def normalize(self): return _cp4vasp.ODPElement_normalize(self)
    def refreshAttr(self): return _cp4vasp.ODPElement_refreshAttr(self)
    __swig_destroy__ = _cp4vasp.delete_ODPElement
    __del__ = lambda self : None;
ODPElement_swigregister = _cp4vasp.ODPElement_swigregister
ODPElement_swigregister(ODPElement)

class ODPCharacterData(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPCharacterData, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPCharacterData, name)
    __repr__ = _swig_repr
    def getData(self): return _cp4vasp.ODPCharacterData_getData(self)
    def setData(self, *args): return _cp4vasp.ODPCharacterData_setData(self, *args)
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPCharacterData(*args)
        try: self.this.append(this)
        except: self.this = this
    def getLength(self): return _cp4vasp.ODPCharacterData_getLength(self)
    def substringData(self, *args): return _cp4vasp.ODPCharacterData_substringData(self, *args)
    def appendData(self, *args): return _cp4vasp.ODPCharacterData_appendData(self, *args)
    def insertData(self, *args): return _cp4vasp.ODPCharacterData_insertData(self, *args)
    def deleteData(self, *args): return _cp4vasp.ODPCharacterData_deleteData(self, *args)
    def replaceData(self, *args): return _cp4vasp.ODPCharacterData_replaceData(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ODPCharacterData
    __del__ = lambda self : None;
ODPCharacterData_swigregister = _cp4vasp.ODPCharacterData_swigregister
ODPCharacterData_swigregister(ODPCharacterData)

class ODPText(ODPCharacterData):
    __swig_setmethods__ = {}
    for _s in [ODPCharacterData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPText, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPCharacterData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPText(*args)
        try: self.this.append(this)
        except: self.this = this
    def splitText(self, *args): return _cp4vasp.ODPText_splitText(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ODPText
    __del__ = lambda self : None;
ODPText_swigregister = _cp4vasp.ODPText_swigregister
ODPText_swigregister(ODPText)

class ODPComment(ODPCharacterData):
    __swig_setmethods__ = {}
    for _s in [ODPCharacterData]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPComment, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPCharacterData]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPComment, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPComment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPComment
    __del__ = lambda self : None;
ODPComment_swigregister = _cp4vasp.ODPComment_swigregister
ODPComment_swigregister(ODPComment)

class ODPCDATASection(ODPText):
    __swig_setmethods__ = {}
    for _s in [ODPText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPCDATASection, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPCDATASection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPCDATASection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPCDATASection
    __del__ = lambda self : None;
ODPCDATASection_swigregister = _cp4vasp.ODPCDATASection_swigregister
ODPCDATASection_swigregister(ODPCDATASection)

class ODPNodeList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNodeList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNodeList, name)
    __repr__ = _swig_repr
    def item(self, *args): return _cp4vasp.ODPNodeList_item(self, *args)
    def getLength(self): return _cp4vasp.ODPNodeList_getLength(self)
    def __init__(self): 
        this = _cp4vasp.new_ODPNodeList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPNodeList
    __del__ = lambda self : None;
ODPNodeList_swigregister = _cp4vasp.ODPNodeList_swigregister
ODPNodeList_swigregister(ODPNodeList)

class ODPChildList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPChildList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPChildList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPChildList(*args)
        try: self.this.append(this)
        except: self.this = this
    def item(self, *args): return _cp4vasp.ODPChildList_item(self, *args)
    def getLength(self): return _cp4vasp.ODPChildList_getLength(self)
    __swig_destroy__ = _cp4vasp.delete_ODPChildList
    __del__ = lambda self : None;
ODPChildList_swigregister = _cp4vasp.ODPChildList_swigregister
ODPChildList_swigregister(ODPChildList)

class ODPElementsByTagNameList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPElementsByTagNameList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPElementsByTagNameList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPElementsByTagNameList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPElementsByTagNameList
    __del__ = lambda self : None;
    def item(self, *args): return _cp4vasp.ODPElementsByTagNameList_item(self, *args)
    def getLength(self): return _cp4vasp.ODPElementsByTagNameList_getLength(self)
ODPElementsByTagNameList_swigregister = _cp4vasp.ODPElementsByTagNameList_swigregister
ODPElementsByTagNameList_swigregister(ODPElementsByTagNameList)

class ODPChildrenByTagNameList(ODPNodeList):
    __swig_setmethods__ = {}
    for _s in [ODPNodeList]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPChildrenByTagNameList, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNodeList]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPChildrenByTagNameList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPChildrenByTagNameList(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPChildrenByTagNameList
    __del__ = lambda self : None;
    def item(self, *args): return _cp4vasp.ODPChildrenByTagNameList_item(self, *args)
    def getLength(self): return _cp4vasp.ODPChildrenByTagNameList_getLength(self)
ODPChildrenByTagNameList_swigregister = _cp4vasp.ODPChildrenByTagNameList_swigregister
ODPChildrenByTagNameList_swigregister(ODPChildrenByTagNameList)

class ODPNamedNodeMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPNamedNodeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ODPNamedNodeMap, name)
    __repr__ = _swig_repr
    def getNamedItem(self, *args): return _cp4vasp.ODPNamedNodeMap_getNamedItem(self, *args)
    def setNamedItem(self, *args): return _cp4vasp.ODPNamedNodeMap_setNamedItem(self, *args)
    def removeNamedItem(self, *args): return _cp4vasp.ODPNamedNodeMap_removeNamedItem(self, *args)
    def item(self, *args): return _cp4vasp.ODPNamedNodeMap_item(self, *args)
    def getLength(self): return _cp4vasp.ODPNamedNodeMap_getLength(self)
    def __init__(self): 
        this = _cp4vasp.new_ODPNamedNodeMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cp4vasp.delete_ODPNamedNodeMap
    __del__ = lambda self : None;
ODPNamedNodeMap_swigregister = _cp4vasp.ODPNamedNodeMap_swigregister
ODPNamedNodeMap_swigregister(ODPNamedNodeMap)

class ODPAttributeMap(ODPNamedNodeMap):
    __swig_setmethods__ = {}
    for _s in [ODPNamedNodeMap]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPAttributeMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNamedNodeMap]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPAttributeMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPAttributeMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def setNode(self, *args): return _cp4vasp.ODPAttributeMap_setNode(self, *args)
    def getAttribute(self, *args): return _cp4vasp.ODPAttributeMap_getAttribute(self, *args)
    def getNamedItem(self, *args): return _cp4vasp.ODPAttributeMap_getNamedItem(self, *args)
    def item(self, *args): return _cp4vasp.ODPAttributeMap_item(self, *args)
    def getLength(self): return _cp4vasp.ODPAttributeMap_getLength(self)
    __swig_destroy__ = _cp4vasp.delete_ODPAttributeMap
    __del__ = lambda self : None;
ODPAttributeMap_swigregister = _cp4vasp.ODPAttributeMap_swigregister
ODPAttributeMap_swigregister(ODPAttributeMap)

class ODPAttr(ODPNode):
    __swig_setmethods__ = {}
    for _s in [ODPNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ODPAttr, name, value)
    __swig_getmethods__ = {}
    for _s in [ODPNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ODPAttr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cp4vasp.new_ODPAttr(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _cp4vasp.ODPAttr_getName(self)
    def getSpecified(self): return _cp4vasp.ODPAttr_getSpecified(self)
    def getValue(self): return _cp4vasp.ODPAttr_getValue(self)
    def setValue(self, *args): return _cp4vasp.ODPAttr_setValue(self, *args)
    __swig_destroy__ = _cp4vasp.delete_ODPAttr
    __del__ = lambda self : None;
ODPAttr_swigregister = _cp4vasp.ODPAttr_swigregister
ODPAttr_swigregister(ODPAttr)

# This file is compatible with both classic and new-style classes.


